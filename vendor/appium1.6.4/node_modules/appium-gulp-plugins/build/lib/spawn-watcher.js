"use strict";

var clear = require('clear'),
    spawn = require('child_process').spawn,
    gulp = require('gulp'),
    gutil = require('gulp-util'),
    Q = require('q'),
    notifier = require('node-notifier'),
    moment = require('moment'),
    _ = require('lodash'),
    path = require('path');

var exitOnError = false;
var clearTerminal = true;

var notify = function notify(subtitle, message) {
  if (process.argv.indexOf('--no-notif') >= 0) return;
  try {
    var title = process.env.APPIUM_NOTIF_BUILD_NAME || 'Appium';
    notifier.notify({
      title: title,
      subtitle: subtitle + '  ' + moment().format('h:mm:ss'),
      message: message
    });
  } catch (ign) {
    console.warn('notifier: [' + title + '] ' + message); // eslint-disable-line no-console
  }
};

var notifyOK = notify.bind(null, 'Build success!', 'All Good!');

module.exports = {
  use: function use(_gulp) {
    gulp = _gulp;
    return this;
  },

  clear: function clear(_clearTerminal) {
    clearTerminal = _clearTerminal;
    return this;
  },

  handleError: function handleError(err) {
    gutil.log(gutil.colors.red(err));
    var code = /\u001b\[(\d+(;\d+)*)?m/g;
    var notifErr = ('' + err).replace(code, '');
    notify('Build failure!', notifErr);
    if (exitOnError) {
      process.exit(1);
    }
  },
  configure: function configure(taskName, filePattern, watchFn) {
    var subtaskName = '_' + taskName;

    var isRespawn = process.argv.indexOf('--respawn') > 0;
    gulp.task(subtaskName, function () {
      exitOnError = true;
      gulp.watch(filePattern, function () {
        if (clearTerminal) clear();
        return watchFn().then(notifyOK);
      });
      gulp.watch(['gulpfile.js'], function () {
        process.exit(0);
      });

      if (!isRespawn) {
        Q.delay(500).then(function () {
          watchFn().then(notifyOK);
        });
      }
    });

    gulp.task(taskName, function () {
      if (clearTerminal) clear();
      var spawnWatch = function spawnWatch(respawn) {
        var args = [subtaskName];
        if (process.argv.indexOf('--no-notif') >= 0) args.push('--no-notif');
        if (respawn) args.push('--respawn');
        args = args.concat(_.chain(process.argv).tail(2).filter(function (arg) {
          if (/gulp$/.test(arg)) return false;
          return [taskName, subtaskName, '--no-notif', '--respawn'].indexOf(arg) < 0;
        }).value());
        var proc = spawn(path.resolve('.', 'node_modules', '.bin', 'gulp'), args, { stdio: 'inherit', shell: true });
        proc.on('close', function (code) {
          spawnWatch(code !== 0);
        });
      };
      spawnWatch();
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zcGF3bi13YXRjaGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7QUFFYixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO0lBQ3hCLEtBQUssR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsS0FBSztJQUN0QyxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUN0QixLQUFLLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQztJQUM1QixDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUNoQixRQUFRLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQztJQUNuQyxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztJQUMxQixDQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztJQUNyQixJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUUzQixJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUM7QUFDeEIsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDOztBQUV6QixJQUFJLE1BQU0sR0FBRyxTQUFULE1BQU0sQ0FBYSxRQUFRLEVBQUUsT0FBTyxFQUFFO0FBQ3hDLE1BQUksT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU87QUFDcEQsTUFBSTtBQUNGLFFBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLElBQUksUUFBUSxDQUFDO0FBQzVELFlBQVEsQ0FBQyxNQUFNLENBQUM7QUFDZCxXQUFLLEVBQUwsS0FBSztBQUNMLGNBQVEsRUFBSyxRQUFRLFVBQUssTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxBQUFFO0FBQ3RELGFBQU8sRUFBUCxPQUFPO0tBQ1IsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxPQUFPLEdBQUcsRUFBRTtBQUNaLFdBQU8sQ0FBQyxJQUFJLGlCQUFlLEtBQUssVUFB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QUFLLENBQUM7QUFDcEMsaUJBQVEsQ0FBQyxRQUFRLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFFO1NBQzlFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQ1osWUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztBQUMzRyxZQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFVLElBQUksRUFBRTtBQUMvQixvQkFBVSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztTQUN4QixDQUFDLENBQUM7T0FDSixDQUFDO0FBQ0YsZ0JBQVUsRUFBRSxDQUFDO0tBQ2QsQ0FBQyxDQUFDO0dBQ0o7Q0FDRixDQUFDIiwiZmlsZSI6ImxpYi9zcGF3bi13YXRjaGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjbGVhciA9IHJlcXVpcmUoJ2NsZWFyJyksXG4gICAgc3Bhd24gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJykuc3Bhd24sXG4gICAgZ3VscCA9IHJlcXVpcmUoJ2d1bHAnKSxcbiAgICBndXRpbCA9IHJlcXVpcmUoJ2d1bHAtdXRpbCcpLFxuICAgIFEgPSByZXF1aXJlKCdxJyksXG4gICAgbm90aWZpZXIgPSByZXF1aXJlKCdub2RlLW5vdGlmaWVyJyksXG4gICAgbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50JyksXG4gICAgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpLFxuICAgIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbnZhciBleGl0T25FcnJvciA9IGZhbHNlO1xudmFyIGNsZWFyVGVybWluYWwgPSB0cnVlO1xuXG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHN1YnRpdGxlLCBtZXNzYWdlKSB7XG4gIGlmIChwcm9jZXNzLmFyZ3YuaW5kZXhPZignLS1uby1ub3RpZicpID49IDApIHJldHVybjtcbiAgdHJ5IHtcbiAgICB2YXIgdGl0bGUgPSBwcm9jZXNzLmVudi5BUFBJVU1fTk9USUZfQlVJTERfTkFNRSB8fCAnQXBwaXVtJztcbiAgICBub3RpZmllci5ub3RpZnkoe1xuICAgICAgdGl0bGUsXG4gICAgICBzdWJ0aXRsZTogYCR7c3VidGl0bGV9ICAke21vbWVudCgpLmZvcm1hdCgnaDptbTpzcycpfWAsXG4gICAgICBtZXNzYWdlXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGlnbikge1xuICAgIGNvbnNvbGUud2Fybihgbm90aWZpZXI6IFske3RpdGxlfV0gJHttZXNzYWdlfWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgfVxufTtcblxudmFyIG5vdGlmeU9LID0gbm90aWZ5LmJpbmQobnVsbCwgJ0J1aWxkIHN1Y2Nlc3MhJywgJ0FsbCBHb29kIScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdXNlIChfZ3VscCkge1xuICAgIGd1bHAgPSBfZ3VscDtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBjbGVhciAoX2NsZWFyVGVybWluYWwpIHtcbiAgICBjbGVhclRlcm1pbmFsID0gX2NsZWFyVGVybWluYWw7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgaGFuZGxlRXJyb3IgKGVycikge1xuICAgIGd1dGlsLmxvZyhndXRpbC5jb2xvcnMucmVkKGVycikpO1xuICAgIHZhciBjb2RlID0gL1xcdTAwMWJcXFsoXFxkKyg7XFxkKykqKT9tL2c7XG4gICAgdmFyIG5vdGlmRXJyID0gKCcnICsgZXJyKS5yZXBsYWNlKGNvZGUsICcnKTtcbiAgICBub3RpZnkoJ0J1aWxkIGZhaWx1cmUhJywgbm90aWZFcnIpO1xuICAgIGlmIChleGl0T25FcnJvcikge1xuICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgIH1cbiAgfSxcbiAgY29uZmlndXJlICh0YXNrTmFtZSwgZmlsZVBhdHRlcm4sIHdhdGNoRm4pIHtcbiAgICB2YXIgc3VidGFza05hbWUgPSAnXycgKyB0YXNrTmFtZTtcblxuICAgIHZhciBpc1Jlc3Bhd24gPSBwcm9jZXNzLmFyZ3YuaW5kZXhPZignLS1yZXNwYXduJykgPiAwO1xuICAgIGd1bHAudGFzayhzdWJ0YXNrTmFtZSwgZnVuY3Rpb24gKCkge1xuICAgICAgZXhpdE9uRXJyb3IgPSB0cnVlO1xuICAgICAgZ3VscC53YXRjaChmaWxlUGF0dGVybiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2xlYXJUZXJtaW5hbCkgY2xlYXIoKTtcbiAgICAgICAgcmV0dXJuIHdhdGNoRm4oKS50aGVuKG5vdGlmeU9LKTtcbiAgICAgIH0pO1xuICAgICAgZ3VscC53YXRjaChbJ2d1bHBmaWxlLmpzJ10sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcHJvY2Vzcy5leGl0KDApO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICghaXNSZXNwYXduKSB7XG4gICAgICAgIFEuZGVsYXkoNTAwKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB3YXRjaEZuKCkudGhlbihub3RpZnlPSyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZ3VscC50YXNrKHRhc2tOYW1lLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoY2xlYXJUZXJtaW5hbCkgY2xlYXIoKTtcbiAgICAgIHZhciBzcGF3bldhdGNoID0gZnVuY3Rpb24gKHJlc3Bhd24pIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbc3VidGFza05hbWVdO1xuICAgICAgICBpZiAocHJvY2Vzcy5hcmd2LmluZGV4T2YoJy0tbm8tbm90aWYnKSA+PSAwKSBhcmdzLnB1c2goJy0tbm8tbm90aWYnKTtcbiAgICAgICAgaWYgKHJlc3Bhd24pIGFyZ3MucHVzaCgnLS1yZXNwYXduJyk7XG4gICAgICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChfLmNoYWluKHByb2Nlc3MuYXJndikudGFpbCgyKS5maWx0ZXIoZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgIGlmICgvZ3VscCQvLnRlc3QoYXJnKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIHJldHVybiAoW3Rhc2tOYW1lLCBzdWJ0YXNrTmFtZSwgJy0tbm8tbm90aWYnLCAnLS1yZXNwYXduJ10uaW5kZXhPZihhcmcpIDwgMCk7XG4gICAgICAgIH0pLnZhbHVlKCkpO1xuICAgICAgICB2YXIgcHJvYyA9IHNwYXduKHBhdGgucmVzb2x2ZSgnLicsICdub2RlX21vZHVsZXMnLCAnLmJpbicsICdndWxwJyksIGFyZ3MsIHtzdGRpbzogJ2luaGVyaXQnLCBzaGVsbDogdHJ1ZX0pO1xuICAgICAgICBwcm9jLm9uKCdjbG9zZScsIGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgICAgICAgc3Bhd25XYXRjaChjb2RlICE9PSAwKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgc3Bhd25XYXRjaCgpO1xuICAgIH0pO1xuICB9XG59O1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9
