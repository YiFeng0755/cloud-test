{
  "_args": [
    [
      {
        "raw": "appium-gulp-plugins@1.x",
        "scope": null,
        "escapedName": "appium-gulp-plugins",
        "name": "appium-gulp-plugins",
        "rawSpec": "1.x",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/var/stf/vendor/appium1.6.4"
    ]
  ],
  "_from": "appium-gulp-plugins@>=1.0.0 <2.0.0",
  "_id": "appium-gulp-plugins@1.4.13",
  "_inCache": true,
  "_location": "/appium-gulp-plugins",
  "_nodeVersion": "4.8.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/appium-gulp-plugins-1.4.13.tgz_1492805117947_0.9006646096240729"
  },
  "_npmUser": {
    "name": "imurchie",
    "email": "isaac@saucelabs.com"
  },
  "_npmVersion": "4.4.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "appium-gulp-plugins@1.x",
    "scope": null,
    "escapedName": "appium-gulp-plugins",
    "name": "appium-gulp-plugins",
    "rawSpec": "1.x",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/appium-gulp-plugins/-/appium-gulp-plugins-1.4.13.tgz",
  "_shasum": "bc473420ac6e1cc849579fced6eb3c1a4b32b8ce",
  "_shrinkwrap": null,
  "_spec": "appium-gulp-plugins@1.x",
  "_where": "/var/stf/vendor/appium1.6.4",
  "author": {
    "name": "appium"
  },
  "bin": {},
  "bugs": {
    "url": "https://github.com/appium/appium-gulp-plugins/issues"
  },
  "dependencies": {
    "appium-ci": "~0.0.4",
    "babel": "^5.8.23",
    "babel-eslint": "^6.0.0",
    "babel-runtime": "=5.8.24",
    "clear": "^0.0.1",
    "coveralls": "^2.13.0",
    "del": "^2.2.0",
    "eslint": "^2.5.1",
    "git-guppy": "^1.1.0",
    "globby": "^4.0.0",
    "gulp": "^3.9.0",
    "gulp-babel": "^5.1.0",
    "gulp-eslint": "^2.0.0",
    "gulp-jshint": "https://github.com/appium/gulp-jshint/archive/master.tar.gz",
    "gulp-mocha": "^2.2.0",
    "gulp-rename": "^1.2.2",
    "gulp-replace": "^0.5.4",
    "gulp-sourcemaps": "^2.2.0",
    "gulp-util": "^3.0.7",
    "isparta": "^4.0.0",
    "jshint-stylish": "^2.1.0",
    "lodash": "^4.0.1",
    "mocha": "^2.4.5",
    "moment": "^2.12.0",
    "node-notifier": "^4.4.0",
    "promisepipe": "^1.0.1",
    "q": "^1.4.1",
    "run-sequence": "^1.1.5",
    "source-map-support": "^0.4.0",
    "through2": "^2.0.0",
    "vinyl-paths": "^2.1.0"
  },
  "description": "Custom gulp plugins to be used across all appium modules",
  "devDependencies": {
    "chai": "^3.0.0",
    "chai-as-promised": "^5.1.0",
    "eslint-config-appium": "^0.0.7",
    "eslint-plugin-babel": "^3.3.0",
    "eslint-plugin-import": "^1.9.2",
    "eslint-plugin-mocha": "^3.0.0",
    "glob": "^6.0.4",
    "pre-commit": "^1.1.3",
    "vargs": "^0.1.0",
    "yargs": "^3.32.0"
  },
  "directories": {
    "lib": "lib"
  },
  "dist": {
    "shasum": "bc473420ac6e1cc849579fced6eb3c1a4b32b8ce",
    "tarball": "https://registry.npmjs.org/appium-gulp-plugins/-/appium-gulp-plugins-1.4.13.tgz"
  },
  "engines": [
    "node"
  ],
  "gitHead": "b856a218e129d3107b5ef493026365bc12d08000",
  "homepage": "https://github.com/appium/appium-gulp-plugins#readme",
  "keywords": [
    "appium"
  ],
  "license": "Apache-2.0",
  "main": "./index.js",
  "maintainers": [
    {
      "name": "dangraham",
      "email": "dan@saucelabs.com"
    },
    {
      "name": "imurchie",
      "email": "isaac@saucelabs.com"
    },
    {
      "name": "jlipps",
      "email": "jlipps@gmail.com"
    }
  ],
  "name": "appium-gulp-plugins",
  "optionalDependencies": {},
  "pre-commit": [
    "precommit-msg",
    "lint",
    "test"
  ],
  "readme": "appium-gulp-plugins\n===================\n\nCustom plugins used accross appium modules\n\n## status\n\n[![Build Status](https://travis-ci.org/appium/appium-gulp-plugins.svg?branch=master)](https://travis-ci.org/appium/appium-gulp-plugins)\n\n## boilerplate plugin\n\nThis plugin sets up all the other typical plugins we use with a simple\nconfiguration object.\n\n### usage\n\nBasically just set up the `boilerplate` plugin as follows:\n\n```js\nvar gulp = require('gulp'),\n    boilerplate = require('appium-gulp-plugins').boilerplate.use(gulp);\n\nboilerplate({build: \"My Project Name\"});\n```\n\nYou can pass a lot of options to configure `boilerplate`. Here are the options\nalong with their defaults (from `lib/boilerplate.js`):\n\n```js\nvar DEFAULT_OPTS = {\n  files: [\"*.js\", \"lib/**/*.js\", \"test/**/*.js\", \"!gulpfile.js\"],\n  transpile: true,\n  transpileOut: \"build\",\n  babelOpts: {},\n  linkBabelRuntime: true,\n  jshint: true,\n  watch: true,\n  test: true,\n  testFiles: null,\n  testReporter: 'nyan',\n  testTimeout: 8000,\n  buildName: null,\n  extraPrepublishTasks: [],\n  preCommitTasks: ['jshint', 'once']\n};\n```\n\nAs you can see, it defaults to transpiling with Babel, running jshint,\nrunning tests, and with the default task being `gulp watch`.\n\n## transpile plugin\n\nBabel compilation, sourcemaps and file renaming functionality in\none plugin. `.es7.js` and `.es6.js` files will be automatically renamed to `.js\nfiles`. The necessary sourcemaps, comments and imports are also\nautomatically added.\n\n### usage\n\n1/ Configure gulp as below:\n\n``` js\nvar gulp = require('gulp'),\nTranspiler = require('appium-gulp-plugins').Transpiler;\n\ngulp.task('transpile', function () {\n  var transpiler = new Transpiler();\n  // babel options are configurable in transpiler.babelOpts\n\n  return gulp.src('test/fixtures/es7/**/*.js')\n    .pipe(transpiler.stream())\n    .pipe(gulp.dest('build'));\n});\n```\n\n2/ in your code you need to mark the main and mocha files as below:\n\n- main: add `// transpile:main` at the beginning of the file ([example here](https://github.com/appium/appium-gulp-plugins/blob/master/test/fixtures/es7/lib/run.es7.js)) .\n- mocha: add `// transpile:mocha` at the beginning of the file ([example here](https://github.com/appium/appium-gulp-plugins/blob/master/test/fixtures/es7/test/a-specs.es7.js))\n\nRegular lib files do not need any extra comments.\n\n### Type assertions\n\nType assertions are not yet supported, but if you use Flow you can pass in an\noption to the traspiler:\n\n```js\nvar transpiler = new Transpiler({flow: true});\n```\n\nThis will leave the type annotations un-stripped. You may specify type in your\ncode like in the following:\n\n```js\n// The regular way\nlet a = function (t:string, n:number):string {return 'let's type code.'};\n\n// Within comments\nlet a = function (ti/*:string*/, n/*:number*/)/*:string*/ {return 'let's type code.'};\n```\n\n## watch plugin\n\nThere are some issues with Gulp 3.x error handling which cause the default\ngulp-watch to hang. This plugin is a small hack which solves that by respawning\nthe whole process on error. This should not be needed in gulp 4.0.\n\nFiles in the `/test` directory that are named `.*-specs.js` are run. Tests which end in `.*-e2e-specs.js` are *not* run when watching. To run end-to-end tests, run `gulp e2e-test`.\n\n### usage\n\n```\nvar gulp = require('gulp'),\n    spawnWatcher = require('./index').spawnWatcher.use(gulp);\n\nspawnWatcher.configure('watch', ['lib/**/*.js','test/**/*.js','!test/fixtures'], function () {\n  // this is the watch action\n  return runSequence('test');\n});\n```\n\nThe test function in `spawnWatcher.configure` should return a promise.\n\n### error handling\n\nThe spawn needs to catch error as soon as they happen. To do so use the\n`spawnWatcher.handleError` method, for instance:\n\n```js\n// add error handling where needed\ngulp.task('transpile', function () {\n  return gulp.src('test/es7/**/*.js')\n    .pipe(transpile())\n    .on('error', spawnWatcher.handleError)\n    .pipe(gulp.dest('build'));\n});\n\ngulp.task('test', ['transpile'] , function () {\n  return gulp.src('build/test/a-specs.js')\n    .pipe(mocha())\n    .on('error', spawnWatcher.handleError);\n});\n```\n\n### clear terminal\n\nTerminal is cleared by default. To avoid that call:\n\n```js\nspawnWatcher.clear(false);\n```\n\n### notification\n\nNative notification is enabled by default. To disable it use the\n`--no-notif` option.\n\n### collate logging and tests\nSet the environment variable `_FORCE_LOGS`\n\n### Git pre-commit hooks\n\nThe package uses [git-guppy](https://www.npmjs.com/package/git-guppy) to install pre-commit hooks. By default it runs, on a commit, the `jshint` and `once` tasks. Setting the `preCommitTasks` boilerplate option changes the tasks which will be done.\n\n## hacking this package\n\n### watch\n\n```\nnpm run watch\n```\n\n### test\n\n```\nnpm test\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/appium/appium-gulp-plugins.git"
  },
  "scripts": {
    "lint": "gulp eslint",
    "precommit-msg": "echo 'Pre-commit checks...' && exit 0",
    "test": "gulp once",
    "watch": "gulp"
  },
  "version": "1.4.13"
}
