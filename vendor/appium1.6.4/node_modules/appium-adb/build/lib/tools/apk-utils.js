'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _helpersJs = require('../helpers.js');

var _teen_process = require('teen_process');

var _loggerJs = require('../logger.js');

var _loggerJs2 = _interopRequireDefault(_loggerJs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _asyncbox = require('asyncbox');

var _appiumSupport = require('appium-support');

var apkUtilsMethods = {};

apkUtilsMethods.isAppInstalled = function callee$0$0(pkg) {
  var installed, stdout, apkInstalledRgx;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        installed = false;

        _loggerJs2['default'].debug('Getting install status for ' + pkg);
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.shell(['pm', 'list', 'packages', pkg]));

      case 5:
        stdout = context$1$0.sent;
        apkInstalledRgx = new RegExp('^package:' + pkg.replace(/(\.)/g, "\\$1") + '$', 'm');

        installed = apkInstalledRgx.test(stdout);
        _loggerJs2['default'].debug('App is' + (!installed ? ' not' : '') + ' installed');
        return context$1$0.abrupt('return', installed);

      case 12:
        context$1$0.prev = 12;
        context$1$0.t0 = context$1$0['catch'](0);

        _loggerJs2['default'].errorAndThrow('Error finding if app is installed. Original error: ' + context$1$0.t0.message);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 12]]);
};

apkUtilsMethods.startUri = function callee$0$0(uri, pkg) {
  var args;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!uri || !pkg) {
          _loggerJs2['default'].errorAndThrow("URI and package arguments are required");
        }
        context$1$0.prev = 1;
        args = ["am", "start", "-W", "-a", "android.intent.action.VIEW", "-d", uri, pkg];
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.shell(args));

      case 5:
        context$1$0.next = 10;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        _loggerJs2['default'].errorAndThrow('Error attempting to start URI. Original error: ' + context$1$0.t0);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7]]);
};

apkUtilsMethods.startApp = function callee$0$0() {
  var startAppOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var apiLevel, cmd, stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;

        if (!startAppOptions.activity || !startAppOptions.pkg) {
          _loggerJs2['default'].errorAndThrow("activity and pkg is required for launching application");
        }
        startAppOptions = _lodash2['default'].clone(startAppOptions);
        // initializing defaults
        _lodash2['default'].defaults(startAppOptions, {
          waitPkg: startAppOptions.pkg,
          waitActivity: false,
          retry: true,
          stopApp: true
        });
        // preventing null waitpkg
        startAppOptions.waitPkg = startAppOptions.waitPkg || startAppOptions.pkg;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 7:
        apiLevel = context$1$0.sent;
        cmd = (0, _helpersJs.buildStartCmd)(startAppOptions, apiLevel);
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.shell(cmd));

      case 11:
        stdout = context$1$0.sent;

        if (!(stdout.indexOf("Error: Activity class") !== -1 && stdout.indexOf("does not exist") !== -1)) {
          context$1$0.next = 23;
          break;
        }

        if (!(startAppOptions.retry && startAppOptions.activity[0] !== ".")) {
          context$1$0.next = 20;
          break;
        }

        _loggerJs2['default'].debug("We tried to start an activity that doesn't exist, " + "retrying with . prepended to activity");
        startAppOptions.activity = '.' + startAppOptions.activity;
        startAppOptions.retry = false;
        return context$1$0.abrupt('return', this.startApp(startAppOptions));

      case 20:
        _loggerJs2['default'].errorAndThrow("Activity used to start app doesn't exist or cannot be " + "launched! Make sure it exists and is a launchable activity");

      case 21:
        context$1$0.next = 24;
        break;

      case 23:
        if (stdout.indexOf("java.lang.SecurityException") !== -1) {
          // if the app is disabled on a real device it will throw a security exception
          _loggerJs2['default'].errorAndThrow("Permission to start activity denied.");
        }

      case 24:
        if (!startAppOptions.waitActivity) {
          context$1$0.next = 27;
          break;
        }

        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(this.waitForActivity(startAppOptions.waitPkg, startAppOptions.waitActivity, startAppOptions.waitDuration));

      case 27:
        context$1$0.next = 32;
        break;

      case 29:
        context$1$0.prev = 29;
        context$1$0.t0 = context$1$0['catch'](0);

        _loggerJs2['default'].errorAndThrow('Error occured while starting App. Original error: ' + context$1$0.t0.message);

      case 32:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 29]]);
};

apkUtilsMethods.getFocusedPackageAndActivity = function callee$0$0() {
  var cmd, nullRe, searchRe, stdout, foundNullMatch, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, line, foundMatch;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug("Getting focused package and activity");
        cmd = ['dumpsys', 'window', 'windows'];
        nullRe = new RegExp(/mFocusedApp=null/);
        searchRe = new RegExp('mFocusedApp.+Record\\{.*\\s([^\\s\\/\\}]+)' + '\\/([^\\s\\/\\}\\,]+)\\,?(\\s[^\\s\\/\\}]+)*\\}');
        context$1$0.prev = 4;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.shell(cmd));

      case 7:
        stdout = context$1$0.sent;
        foundNullMatch = false;
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 12;
        _iterator = _getIterator(stdout.split("\n"));

      case 14:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 25;
          break;
        }

        line = _step.value;
        foundMatch = searchRe.exec(line);

        if (!foundMatch) {
          context$1$0.next = 21;
          break;
        }

        return context$1$0.abrupt('return', { appPackage: foundMatch[1].trim(), appActivity: foundMatch[2].trim() });

      case 21:
        if (nullRe.test(line)) {
          foundNullMatch = true;
        }

      case 22:
        _iteratorNormalCompletion = true;
        context$1$0.next = 14;
        break;

      case 25:
        context$1$0.next = 31;
        break;

      case 27:
        context$1$0.prev = 27;
        context$1$0.t0 = context$1$0['catch'](12);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 31:
        context$1$0.prev = 31;
        context$1$0.prev = 32;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 34:
        context$1$0.prev = 34;

        if (!_didIteratorError) {
          context$1$0.next = 37;
          break;
        }

        throw _iteratorError;

      case 37:
        return context$1$0.finish(34);

      case 38:
        return context$1$0.finish(31);

      case 39:
        if (!foundNullMatch) {
          context$1$0.next = 43;
          break;
        }

        return context$1$0.abrupt('return', { appPackage: null, appActivity: null });

      case 43:
        _loggerJs2['default'].errorAndThrow("Could not parse activity from dumpsys");

      case 44:
        context$1$0.next = 49;
        break;

      case 46:
        context$1$0.prev = 46;
        context$1$0.t1 = context$1$0['catch'](4);

        _loggerJs2['default'].errorAndThrow('Could not get focusPackageAndActivity. Original error: ' + context$1$0.t1.message);

      case 49:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[4, 46], [12, 27, 31, 39], [32,, 34, 38]]);
};

apkUtilsMethods.waitForActivityOrNot = function callee$0$0(pkg, activity, not) {
  var waitMs = arguments.length <= 3 || arguments[3] === undefined ? 20000 : arguments[3];

  var endAt, possibleActivityNames, allActivities, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, oneActivity, possibleActivityPatterns, _loop, _ret, activityMessage;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(!pkg || !activity)) {
          context$1$0.next = 2;
          break;
        }

        throw new Error("Package and activity required.");

      case 2:
        _loggerJs2['default'].debug('Waiting for pkg: \'' + pkg + '\' and activity: \'' + activity + '\' to' + ((not ? ' not' : '') + ' be focused'));
        endAt = Date.now() + waitMs;
        possibleActivityNames = [];
        allActivities = activity.split(",");
        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 9;

        for (_iterator2 = _getIterator(allActivities); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          oneActivity = _step2.value;

          oneActivity = oneActivity.trim();
          // Only accept fully qualified activity name.
          if (!oneActivity.startsWith('.')) {
            possibleActivityNames.push(oneActivity);
          }
          possibleActivityNames.push((pkg + '.' + oneActivity).replace(/\.+/g, '.'));
        }
        context$1$0.next = 17;
        break;

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](9);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t0;

      case 17:
        context$1$0.prev = 17;
        context$1$0.prev = 18;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 20:
        context$1$0.prev = 20;

        if (!_didIteratorError2) {
          context$1$0.next = 23;
          break;
        }

        throw _iteratorError2;

      case 23:
        return context$1$0.finish(20);

      case 24:
        return context$1$0.finish(17);

      case 25:
        _loggerJs2['default'].debug('Possible activities, to be checked: ' + possibleActivityNames.join(', '));
        possibleActivityPatterns = possibleActivityNames.map(function (possibleActivityName) {
          return new RegExp('^' + possibleActivityName.replace(/\./g, '\\.').replace(/\*/g, '.*?') + '$');
        });

        _loop = function callee$1$0() {
          var _ref, appPackage, appActivity, fullyQualifiedActivity, foundAct;

          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.getFocusedPackageAndActivity());

              case 2:
                _ref = context$2$0.sent;
                appPackage = _ref.appPackage;
                appActivity = _ref.appActivity;
                fullyQualifiedActivity = appActivity.startsWith('.') ? '' + appPackage + appActivity : appActivity;

                _loggerJs2['default'].debug('Found package: \'' + appPackage + '\' and fully qualified activity name : \'' + fullyQualifiedActivity + '\'');
                foundAct = appPackage === pkg && _lodash2['default'].findIndex(possibleActivityPatterns, function (possiblePattern) {
                  return possiblePattern.test(fullyQualifiedActivity);
                }) !== -1;

                if (!(!not && foundAct || not && !foundAct)) {
                  context$2$0.next = 10;
                  break;
                }

                return context$2$0.abrupt('return', {
                  v: undefined
                });

              case 10:
                _loggerJs2['default'].debug('Incorrect package and activity. Retrying.');
                // cool down so we're not overloading device with requests
                context$2$0.next = 13;
                return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(750));

              case 13:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        };

      case 28:
        if (!(Date.now() < endAt)) {
          context$1$0.next = 36;
          break;
        }

        context$1$0.next = 31;
        return _regeneratorRuntime.awrap(_loop());

      case 31:
        _ret = context$1$0.sent;

        if (!(typeof _ret === 'object')) {
          context$1$0.next = 34;
          break;
        }

        return context$1$0.abrupt('return', _ret.v);

      case 34:
        context$1$0.next = 28;
        break;

      case 36:
        activityMessage = possibleActivityNames.join(" or ");

        _loggerJs2['default'].errorAndThrow(pkg + '/' + activityMessage + ' never ' + (not ? 'stopped' : 'started'));

      case 38:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[9, 13, 17, 25], [18,, 20, 24]]);
};

apkUtilsMethods.waitForActivity = function callee$0$0(pkg, act) {
  var waitMs = arguments.length <= 2 || arguments[2] === undefined ? 20000 : arguments[2];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.waitForActivityOrNot(pkg, act, false, waitMs));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.waitForNotActivity = function callee$0$0(pkg, act) {
  var waitMs = arguments.length <= 2 || arguments[2] === undefined ? 20000 : arguments[2];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.waitForActivityOrNot(pkg, act, true, waitMs));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.uninstallApk = function callee$0$0(pkg) {
  var stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Uninstalling ' + pkg);
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.forceStop(pkg));

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.adbExec(['uninstall', pkg], { timeout: 20000 }));

      case 6:
        stdout = context$1$0.sent;

        stdout = stdout.trim();
        // stdout may contain warnings meaning success is not on the first line.

        if (!(stdout.indexOf("Success") !== -1)) {
          context$1$0.next = 13;
          break;
        }

        _loggerJs2['default'].info("App was uninstalled");
        return context$1$0.abrupt('return', true);

      case 13:
        _loggerJs2['default'].info("App was not uninstalled, maybe it wasn't on device?");
        return context$1$0.abrupt('return', false);

      case 15:
        context$1$0.next = 20;
        break;

      case 17:
        context$1$0.prev = 17;
        context$1$0.t0 = context$1$0['catch'](1);

        _loggerJs2['default'].errorAndThrow('Unable to uninstall APK. Original error: ' + context$1$0.t0.message);

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 17]]);
};

apkUtilsMethods.installFromDevicePath = function callee$0$0(apkPathOnDevice) {
  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['pm', 'install', '-r', apkPathOnDevice], opts));

      case 2:
        stdout = context$1$0.sent;

        if (stdout.indexOf("Failure") !== -1) {
          _loggerJs2['default'].errorAndThrow('Remote install failed: ' + stdout);
        }

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.install = function callee$0$0(apk) {
  var replace = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
  var timeout = arguments.length <= 2 || arguments[2] === undefined ? 60000 : arguments[2];
  var stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!replace) {
          context$1$0.next = 8;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adbExec(['install', '-r', apk], { timeout: timeout }));

      case 3:
        stdout = context$1$0.sent;

        if (!stdout.match(/INSTALL_.*_FAILED/)) {
          context$1$0.next = 6;
          break;
        }

        throw new Error('apk install failed');

      case 6:
        context$1$0.next = 18;
        break;

      case 8:
        context$1$0.prev = 8;
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.adbExec(['install', apk], { timeout: timeout }));

      case 11:
        context$1$0.next = 18;
        break;

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](8);

        if (!(context$1$0.t0.message.indexOf('INSTALL_FAILED_ALREADY_EXISTS') === -1)) {
          context$1$0.next = 17;
          break;
        }

        throw context$1$0.t0;

      case 17:
        _loggerJs2['default'].debug('Application \'' + apk + '\' already installed. Continuing.');

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[8, 13]]);
};

apkUtilsMethods.installOrUpgrade = function callee$0$0(apk) {
  var pkg = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  var timeout = arguments.length <= 2 || arguments[2] === undefined ? 60000 : arguments[2];
  var apkInfo, pkgInfo, pkgVersionCode, apkVersionCode;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        apkInfo = null;

        if (pkg) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.getApkInfo(apk));

      case 4:
        apkInfo = context$1$0.sent;

        pkg = apkInfo.name;

      case 6:
        if (pkg) {
          context$1$0.next = 9;
          break;
        }

        _loggerJs2['default'].warn('Cannot read the package name of ' + apk + '. Assuming correct app version is already installed');
        return context$1$0.abrupt('return');

      case 9:
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.isAppInstalled(pkg));

      case 11:
        if (context$1$0.sent) {
          context$1$0.next = 15;
          break;
        }

        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(this.install(apk, false, timeout));

      case 14:
        return context$1$0.abrupt('return');

      case 15:
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(this.getPackageInfo(pkg));

      case 17:
        pkgInfo = context$1$0.sent;

        _loggerJs2['default'].debug("xxxxxxxxxxxxxxxx pkginfoxxxxxx");
        _loggerJs2['default'].debug(pkgInfo);
        _loggerJs2['default'].debug('xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');
        pkgVersionCode = pkgInfo.versionCode;

        if (apkInfo) {
          context$1$0.next = 26;
          break;
        }

        context$1$0.next = 25;
        return _regeneratorRuntime.awrap(this.getApkInfo(apk));

      case 25:
        apkInfo = context$1$0.sent;

      case 26:
        apkVersionCode = apkInfo.versionCode;

        if (!(_lodash2['default'].isUndefined(apkVersionCode) || _lodash2['default'].isUndefined(pkgVersionCode))) {
          context$1$0.next = 30;
          break;
        }

        _loggerJs2['default'].warn('Cannot read version codes of ' + apk + ' and/or ' + pkg + '. Assuming correct app version is already installed');
        return context$1$0.abrupt('return');

      case 30:
        if (!(pkgVersionCode >= apkVersionCode)) {
          context$1$0.next = 33;
          break;
        }

        _loggerJs2['default'].debug('The installed "' + pkg + '" package does not require upgrade (' + pkgVersionCode + ' >= ' + apkVersionCode + ')');
        return context$1$0.abrupt('return');

      case 33:
        _loggerJs2['default'].debug('The installed "' + pkg + '" package is older than ' + apk + ' (' + pkgVersionCode + ' < ' + apkVersionCode + '). ' + 'Executing upgrade');
        context$1$0.prev = 34;
        context$1$0.next = 37;
        return _regeneratorRuntime.awrap(this.install(apk, true, timeout));

      case 37:
        context$1$0.next = 48;
        break;

      case 39:
        context$1$0.prev = 39;
        context$1$0.t0 = context$1$0['catch'](34);

        _loggerJs2['default'].warn('Cannot upgrade ' + pkg + ' because of "' + context$1$0.t0.message + '". Trying full reinstall');
        context$1$0.next = 44;
        return _regeneratorRuntime.awrap(this.uninstallApk(pkg));

      case 44:
        if (context$1$0.sent) {
          context$1$0.next = 46;
          break;
        }

        _loggerJs2['default'].errorAndThrow('"' + pkg + '" package cannot be uninstalled');

      case 46:
        context$1$0.next = 48;
        return _regeneratorRuntime.awrap(this.install(apk, false, timeout));

      case 48:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[34, 39]]);
};

apkUtilsMethods.extractStringsFromApk = function callee$0$0(apk, language, out) {
  var stringsJson, localPath, apkTools, args, fileData, apkStrings, msg;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Extracting strings for language: ' + (language || "default"));
        stringsJson = 'strings.json';
        localPath = undefined;

        if (language) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.getDeviceLanguage());

      case 6:
        language = context$1$0.sent;

      case 7:
        apkTools = this.jars['appium_apk_tools.jar'];
        args = ['-jar', apkTools, 'stringsFromApk', apk, out, language];
        fileData = undefined, apkStrings = undefined;
        context$1$0.prev = 10;
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('java', args));

      case 13:
        context$1$0.next = 21;
        break;

      case 15:
        context$1$0.prev = 15;
        context$1$0.t0 = context$1$0['catch'](10);

        _loggerJs2['default'].debug('No strings.xml for language \'' + language + '\', getting default ' + 'strings.xml');
        args.pop();
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('java', args));

      case 21:
        context$1$0.prev = 21;

        _loggerJs2['default'].debug("Reading strings from converted strings.json");
        localPath = _path2['default'].join(out, stringsJson);
        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(localPath, 'utf8'));

      case 26:
        fileData = context$1$0.sent;

        apkStrings = JSON.parse(fileData);
        context$1$0.next = 35;
        break;

      case 30:
        context$1$0.prev = 30;
        context$1$0.t1 = context$1$0['catch'](21);

        if (fileData) {
          _loggerJs2['default'].debug('Content started with: ' + fileData.slice(0, 300));
        }
        msg = 'Could not parse strings from strings.json. Original ' + ('error: ' + context$1$0.t1.message);

        _loggerJs2['default'].errorAndThrow(msg);

      case 35:
        return context$1$0.abrupt('return', { apkStrings: apkStrings, localPath: localPath });

      case 36:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[10, 15], [21, 30]]);
};

apkUtilsMethods.getDeviceLanguage = function callee$0$0() {
  var language;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        language = undefined;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 3:
        context$1$0.t0 = context$1$0.sent;

        if (!(context$1$0.t0 < 23)) {
          context$1$0.next = 14;
          break;
        }

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.getDeviceSysLanguage());

      case 7:
        language = context$1$0.sent;

        if (language) {
          context$1$0.next = 12;
          break;
        }

        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.getDeviceProductLanguage());

      case 11:
        language = context$1$0.sent;

      case 12:
        context$1$0.next = 17;
        break;

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.getDeviceLocale());

      case 16:
        language = context$1$0.sent.split("-")[0];

      case 17:
        return context$1$0.abrupt('return', language);

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.setDeviceLanguage = function callee$0$0(language) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setDeviceSysLanguage(language));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.getDeviceCountry = function callee$0$0() {
  var country;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDeviceSysCountry());

      case 2:
        country = context$1$0.sent;

        if (country) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.getDeviceProductCountry());

      case 6:
        country = context$1$0.sent;

      case 7:
        return context$1$0.abrupt('return', country);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.setDeviceCountry = function callee$0$0(country) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setDeviceSysCountry(country));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.getDeviceLocale = function callee$0$0() {
  var locale;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDeviceSysLocale());

      case 2:
        locale = context$1$0.sent;

        if (locale) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.getDeviceProductLocale());

      case 6:
        locale = context$1$0.sent;

      case 7:
        return context$1$0.abrupt('return', locale);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.setDeviceLocale = function callee$0$0(locale) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setDeviceSysLocale(locale));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.getPackageName = function callee$0$0(apk) {
  var args, _ref2, stdout, apkPackage;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        args = ['dump', 'badging', apk];
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.initAapt());

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, args));

      case 5:
        _ref2 = context$1$0.sent;
        stdout = _ref2.stdout;
        apkPackage = new RegExp(/package: name='([^']+)'/g).exec(stdout);

        if (apkPackage && apkPackage.length >= 2) {
          apkPackage = apkPackage[1];
        } else {
          apkPackage = null;
        }
        return context$1$0.abrupt('return', apkPackage);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.getApkInfo = function callee$0$0(apkPath) {
  var _ref3, stdout, matches;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(apkPath));

      case 2:
        if (context$1$0.sent) {
          context$1$0.next = 4;
          break;
        }

        _loggerJs2['default'].errorAndThrow('The file at path ' + apkPath + ' does not exist or is not accessible');

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.initAapt());

      case 6:
        context$1$0.prev = 6;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, ['d', 'badging', apkPath]));

      case 9:
        _ref3 = context$1$0.sent;
        stdout = _ref3.stdout;
        matches = new RegExp(/package: name='([^']+)' versionCode='(\d+)' versionName='([^']+)'/).exec(stdout);

        if (!matches) {
          context$1$0.next = 14;
          break;
        }

        return context$1$0.abrupt('return', {
          name: matches[1],
          versionCode: parseInt(matches[2], 10),
          versionName: matches[3]
        });

      case 14:
        context$1$0.next = 19;
        break;

      case 16:
        context$1$0.prev = 16;
        context$1$0.t0 = context$1$0['catch'](6);

        _loggerJs2['default'].warn('Error "' + context$1$0.t0.message + '" while getting badging info');

      case 19:
        return context$1$0.abrupt('return', {});

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 16]]);
};

apkUtilsMethods.getPackageInfo = function callee$0$0(pkg) {
  var result, stdout, versionNameMatch, versionCodeMatch;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Getting package info for ' + pkg);
        result = { name: pkg };
        context$1$0.prev = 2;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.shell(['dumpsys', 'package', pkg]));

      case 5:
        stdout = context$1$0.sent;
        versionNameMatch = new RegExp(/versionName=([\d+\.]+)/).exec(stdout);

        if (versionNameMatch) {
          result.versionName = versionNameMatch[1];
        }
        versionCodeMatch = new RegExp(/versionCode=(\d+)/).exec(stdout);

        if (versionCodeMatch) {
          result.versionCode = parseInt(versionCodeMatch[1], 10);
        }
        return context$1$0.abrupt('return', result);

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](2);

        _loggerJs2['default'].warn('Error "' + context$1$0.t0.message + '" while dumping package info');

      case 16:
        return context$1$0.abrupt('return', result);

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 13]]);
};

exports['default'] = apkUtilsMethods;
module.exports = exports['default'];
// https://regex101.com/r/xZ8vF7/1

// on some systems this will throw an error if the app already
// exists

// this method is only used in API < 23

// this method is only used in API < 23

// this method is only used in API < 23

// this method is only used in API >= 23

// this method is only used in API >= 23
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy9hcGstdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O3lCQUE4QixlQUFlOzs0QkFDeEIsY0FBYzs7d0JBQ25CLGNBQWM7Ozs7b0JBQ2IsTUFBTTs7OztzQkFDVCxRQUFROzs7O3dCQUNBLFVBQVU7OzZCQUNiLGdCQUFnQjs7QUFFbkMsSUFBSSxlQUFlLEdBQUcsRUFBRSxDQUFDOztBQUV6QixlQUFlLENBQUMsY0FBYyxHQUFHLG9CQUFnQixHQUFHO01BRTVDLFNBQVMsRUFFVCxNQUFNLEVBQ04sZUFBZTs7Ozs7QUFIZixpQkFBUyxHQUFHLEtBQUs7O0FBQ3JCLDhCQUFJLEtBQUssaUNBQStCLEdBQUcsQ0FBRyxDQUFDOzt5Q0FDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDOzs7QUFBMUQsY0FBTTtBQUNOLHVCQUFlLEdBQUcsSUFBSSxNQUFNLGVBQWEsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLFFBQUssR0FBRyxDQUFDOztBQUNsRixpQkFBUyxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDekMsOEJBQUksS0FBSyxhQUFVLENBQUMsU0FBUyxHQUFHLE1BQU0sR0FBRyxFQUFFLENBQUEsZ0JBQWEsQ0FBQzs0Q0FDbEQsU0FBUzs7Ozs7O0FBRWhCLDhCQUFJLGFBQWEseURBQXVELGVBQUUsT0FBTyxDQUFHLENBQUM7Ozs7Ozs7Q0FFeEYsQ0FBQzs7QUFFRixlQUFlLENBQUMsUUFBUSxHQUFHLG9CQUFnQixHQUFHLEVBQUUsR0FBRztNQUszQyxJQUFJOzs7O0FBSlYsWUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUNoQixnQ0FBSSxhQUFhLENBQUMsd0NBQXdDLENBQUMsQ0FBQztTQUM3RDs7QUFFSyxZQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUUs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O0NBQ2QsQ0FBQzs7cUJBRWEsZUFBZSIsImZpbGUiOiJsaWIvdG9vbHMvYXBrLXV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnVpbGRTdGFydENtZCB9IGZyb20gJy4uL2hlbHBlcnMuanMnO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlci5qcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCB7IGZzIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuXG5sZXQgYXBrVXRpbHNNZXRob2RzID0ge307XG5cbmFwa1V0aWxzTWV0aG9kcy5pc0FwcEluc3RhbGxlZCA9IGFzeW5jIGZ1bmN0aW9uIChwa2cpIHtcbiAgdHJ5IHtcbiAgICBsZXQgaW5zdGFsbGVkID0gZmFsc2U7XG4gICAgbG9nLmRlYnVnKGBHZXR0aW5nIGluc3RhbGwgc3RhdHVzIGZvciAke3BrZ31gKTtcbiAgICBsZXQgc3Rkb3V0ID0gYXdhaXQgdGhpcy5zaGVsbChbJ3BtJywgJ2xpc3QnLCAncGFja2FnZXMnLCBwa2ddKTtcbiAgICBsZXQgYXBrSW5zdGFsbGVkUmd4ID0gbmV3IFJlZ0V4cChgXnBhY2thZ2U6JHtwa2cucmVwbGFjZSgvKFxcLikvZywgXCJcXFxcJDFcIil9JGAsICdtJyk7XG4gICAgaW5zdGFsbGVkID0gYXBrSW5zdGFsbGVkUmd4LnRlc3Qoc3Rkb3V0KTtcbiAgICBsb2cuZGVidWcoYEFwcCBpcyR7IWluc3RhbGxlZCA/ICcgbm90JyA6ICcnfSBpbnN0YWxsZWRgKTtcbiAgICByZXR1cm4gaW5zdGFsbGVkO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYEVycm9yIGZpbmRpbmcgaWYgYXBwIGlzIGluc3RhbGxlZC4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICB9XG59O1xuXG5hcGtVdGlsc01ldGhvZHMuc3RhcnRVcmkgPSBhc3luYyBmdW5jdGlvbiAodXJpLCBwa2cpIHtcbiAgaWYgKCF1cmkgfHwgIXBrZykge1xuICAgIGxvZy5lcnJvckFuZFRocm93KFwiVVJJIGFuZCBwYWNrYWdlIGFyZ3VtZW50cyBhcmUgcmVxdWlyZWRcIik7XG4gIH1cbiAgdHJ5IHtcbiAgICBsZXQgYXJncyA9IFtcImFtXCIsIFwic3RhcnRcIiwgXCItV1wiLCBcIi1hXCIsIFwiYW5kcm9pZC5pbnRlbnQuYWN0aW9uLlZJRVdcIiwgXCItZFwiLFxuICAgICAgICAgICAgICAgIHVyaSwgcGtnXTtcbiAgICBhd2FpdCB0aGlzLnNoZWxsKGFyZ3MpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYEVycm9yIGF0dGVtcHRpbmcgdG8gc3RhcnQgVVJJLiBPcmlnaW5hbCBlcnJvcjogJHtlfWApO1xuICB9XG59O1xuXG5hcGtVdGlsc01ldGhvZHMuc3RhcnRBcHAgPSBhc3luYyBmdW5jdGlvbiAoc3RhcnRBcHBPcHRpb25zID0ge30pIHtcbiAgdHJ5IHtcbiAgICBpZiAoIXN0YXJ0QXBwT3B0aW9ucy5hY3Rpdml0eSB8fCAhc3RhcnRBcHBPcHRpb25zLnBrZykge1xuICAgICAgbG9nLmVycm9yQW5kVGhyb3coXCJhY3Rpdml0eSBhbmQgcGtnIGlzIHJlcXVpcmVkIGZvciBsYXVuY2hpbmcgYXBwbGljYXRpb25cIik7XG4gICAgfVxuICAgIHN0YXJ0QXBwT3B0aW9ucyA9IF8uY2xvbmUoc3RhcnRBcHBPcHRpb25zKTtcbiAgICAvLyBpbml0aWFsaXppbmcgZGVmYXVsdHNcbiAgICBfLmRlZmF1bHRzKHN0YXJ0QXBwT3B0aW9ucywge1xuICAgICAgd2FpdFBrZzogc3RhcnRBcHBPcHRpb25zLnBrZyxcbiAgICAgIHdhaXRBY3Rpdml0eTogZmFsc2UsXG4gICAgICByZXRyeTogdHJ1ZSxcbiAgICAgIHN0b3BBcHA6IHRydWVcbiAgICB9KTtcbiAgICAvLyBwcmV2ZW50aW5nIG51bGwgd2FpdHBrZ1xuICAgIHN0YXJ0QXBwT3B0aW9ucy53YWl0UGtnID0gc3RhcnRBcHBPcHRpb25zLndhaXRQa2cgfHwgc3RhcnRBcHBPcHRpb25zLnBrZztcbiAgICBsZXQgYXBpTGV2ZWwgPSBhd2FpdCB0aGlzLmdldEFwaUxldmVsKCk7XG4gICAgbGV0IGNtZCA9IGJ1aWxkU3RhcnRDbWQoc3RhcnRBcHBPcHRpb25zLCBhcGlMZXZlbCk7XG4gICAgbGV0IHN0ZG91dCA9IGF3YWl0IHRoaXMuc2hlbGwoY21kKTtcbiAgICBpZiAoc3Rkb3V0LmluZGV4T2YoXCJFcnJvcjogQWN0aXZpdHkgY2xhc3NcIikgIT09IC0xICYmXG4gICAgICAgIHN0ZG91dC5pbmRleE9mKFwiZG9lcyBub3QgZXhpc3RcIikgIT09IC0xKSB7XG4gICAgICBpZiAoc3RhcnRBcHBPcHRpb25zLnJldHJ5ICYmIHN0YXJ0QXBwT3B0aW9ucy5hY3Rpdml0eVswXSAhPT0gXCIuXCIpIHtcbiAgICAgICAgbG9nLmRlYnVnKFwiV2UgdHJpZWQgdG8gc3RhcnQgYW4gYWN0aXZpdHkgdGhhdCBkb2Vzbid0IGV4aXN0LCBcIiArXG4gICAgICAgICAgICAgICAgICBcInJldHJ5aW5nIHdpdGggLiBwcmVwZW5kZWQgdG8gYWN0aXZpdHlcIik7XG4gICAgICAgIHN0YXJ0QXBwT3B0aW9ucy5hY3Rpdml0eSA9IGAuJHtzdGFydEFwcE9wdGlvbnMuYWN0aXZpdHl9YDtcbiAgICAgICAgc3RhcnRBcHBPcHRpb25zLnJldHJ5ID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0QXBwKHN0YXJ0QXBwT3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2cuZXJyb3JBbmRUaHJvdyhcIkFjdGl2aXR5IHVzZWQgdG8gc3RhcnQgYXBwIGRvZXNuJ3QgZXhpc3Qgb3IgY2Fubm90IGJlIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsYXVuY2hlZCEgTWFrZSBzdXJlIGl0IGV4aXN0cyBhbmQgaXMgYSBsYXVuY2hhYmxlIGFjdGl2aXR5XCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3Rkb3V0LmluZGV4T2YoXCJqYXZhLmxhbmcuU2VjdXJpdHlFeGNlcHRpb25cIikgIT09IC0xKSB7XG4gICAgICAvLyBpZiB0aGUgYXBwIGlzIGRpc2FibGVkIG9uIGEgcmVhbCBkZXZpY2UgaXQgd2lsbCB0aHJvdyBhIHNlY3VyaXR5IGV4Y2VwdGlvblxuICAgICAgbG9nLmVycm9yQW5kVGhyb3coXCJQZXJtaXNzaW9uIHRvIHN0YXJ0IGFjdGl2aXR5IGRlbmllZC5cIik7XG4gICAgfVxuICAgIGlmIChzdGFydEFwcE9wdGlvbnMud2FpdEFjdGl2aXR5KSB7XG4gICAgICBhd2FpdCB0aGlzLndhaXRGb3JBY3Rpdml0eShzdGFydEFwcE9wdGlvbnMud2FpdFBrZywgc3RhcnRBcHBPcHRpb25zLndhaXRBY3Rpdml0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QXBwT3B0aW9ucy53YWl0RHVyYXRpb24pO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBFcnJvciBvY2N1cmVkIHdoaWxlIHN0YXJ0aW5nIEFwcC4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICB9XG59O1xuXG5cbmFwa1V0aWxzTWV0aG9kcy5nZXRGb2N1c2VkUGFja2FnZUFuZEFjdGl2aXR5ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBsb2cuZGVidWcoXCJHZXR0aW5nIGZvY3VzZWQgcGFja2FnZSBhbmQgYWN0aXZpdHlcIik7XG4gIGxldCBjbWQgPSBbJ2R1bXBzeXMnLCAnd2luZG93JywgJ3dpbmRvd3MnXTtcbiAgbGV0IG51bGxSZSA9IG5ldyBSZWdFeHAoL21Gb2N1c2VkQXBwPW51bGwvKTtcbiAgbGV0IHNlYXJjaFJlID0gbmV3IFJlZ0V4cCgnbUZvY3VzZWRBcHAuK1JlY29yZFxcXFx7LipcXFxccyhbXlxcXFxzXFxcXC9cXFxcfV0rKScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcXFxcLyhbXlxcXFxzXFxcXC9cXFxcfVxcXFwsXSspXFxcXCw/KFxcXFxzW15cXFxcc1xcXFwvXFxcXH1dKykqXFxcXH0nKTsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci94Wjh2RjcvMVxuICB0cnkge1xuICAgIGxldCBzdGRvdXQgPSBhd2FpdCB0aGlzLnNoZWxsKGNtZCk7XG4gICAgbGV0IGZvdW5kTnVsbE1hdGNoID0gZmFsc2U7XG4gICAgZm9yIChsZXQgbGluZSBvZiBzdGRvdXQuc3BsaXQoXCJcXG5cIikpIHtcbiAgICAgIGxldCBmb3VuZE1hdGNoID0gc2VhcmNoUmUuZXhlYyhsaW5lKTtcbiAgICAgIGlmIChmb3VuZE1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7YXBwUGFja2FnZTogZm91bmRNYXRjaFsxXS50cmltKCksIGFwcEFjdGl2aXR5OiBmb3VuZE1hdGNoWzJdLnRyaW0oKX07XG4gICAgICB9IGVsc2UgaWYgKG51bGxSZS50ZXN0KGxpbmUpKSB7XG4gICAgICAgIGZvdW5kTnVsbE1hdGNoID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZvdW5kTnVsbE1hdGNoKSB7XG4gICAgICByZXR1cm4ge2FwcFBhY2thZ2U6IG51bGwsIGFwcEFjdGl2aXR5OiBudWxsfTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmVycm9yQW5kVGhyb3coXCJDb3VsZCBub3QgcGFyc2UgYWN0aXZpdHkgZnJvbSBkdW1wc3lzXCIpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBDb3VsZCBub3QgZ2V0IGZvY3VzUGFja2FnZUFuZEFjdGl2aXR5LiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbmFwa1V0aWxzTWV0aG9kcy53YWl0Rm9yQWN0aXZpdHlPck5vdCA9IGFzeW5jIGZ1bmN0aW9uIChwa2csIGFjdGl2aXR5LCBub3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FpdE1zID0gMjAwMDApIHtcbiAgaWYgKCFwa2cgfHwgIWFjdGl2aXR5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUGFja2FnZSBhbmQgYWN0aXZpdHkgcmVxdWlyZWQuXCIpO1xuICB9XG4gIGxvZy5kZWJ1ZyhgV2FpdGluZyBmb3IgcGtnOiAnJHtwa2d9JyBhbmQgYWN0aXZpdHk6ICcke2FjdGl2aXR5fScgdG9gICtcbiAgICAgICAgICAgIGAke25vdCA/ICcgbm90JyA6ICcnfSBiZSBmb2N1c2VkYCk7XG4gIGxldCBlbmRBdCA9IERhdGUubm93KCkgKyB3YWl0TXM7XG5cbiAgbGV0IHBvc3NpYmxlQWN0aXZpdHlOYW1lcyA9IFtdO1xuICBsZXQgYWxsQWN0aXZpdGllcyA9IGFjdGl2aXR5LnNwbGl0KFwiLFwiKTtcbiAgZm9yIChsZXQgb25lQWN0aXZpdHkgb2YgYWxsQWN0aXZpdGllcykge1xuICAgIG9uZUFjdGl2aXR5ID0gb25lQWN0aXZpdHkudHJpbSgpO1xuICAgIC8vIE9ubHkgYWNjZXB0IGZ1bGx5IHF1YWxpZmllZCBhY3Rpdml0eSBuYW1lLlxuICAgIGlmICghb25lQWN0aXZpdHkuc3RhcnRzV2l0aCgnLicpKSB7XG4gICAgICBwb3NzaWJsZUFjdGl2aXR5TmFtZXMucHVzaChvbmVBY3Rpdml0eSk7XG4gICAgfVxuICAgIHBvc3NpYmxlQWN0aXZpdHlOYW1lcy5wdXNoKGAke3BrZ30uJHtvbmVBY3Rpdml0eX1gLnJlcGxhY2UoL1xcLisvZywgJy4nKSk7XG4gIH1cbiAgbG9nLmRlYnVnKGBQb3NzaWJsZSBhY3Rpdml0aWVzLCB0byBiZSBjaGVja2VkOiAke3Bvc3NpYmxlQWN0aXZpdHlOYW1lcy5qb2luKCcsICcpfWApO1xuICBsZXQgcG9zc2libGVBY3Rpdml0eVBhdHRlcm5zID0gcG9zc2libGVBY3Rpdml0eU5hbWVzLm1hcCgocG9zc2libGVBY3Rpdml0eU5hbWUpID0+XG4gICAgbmV3IFJlZ0V4cChgXiR7cG9zc2libGVBY3Rpdml0eU5hbWUucmVwbGFjZSgvXFwuL2csICdcXFxcLicpLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyl9JGApXG4gICk7XG5cbiAgd2hpbGUgKERhdGUubm93KCkgPCBlbmRBdCkge1xuICAgIGxldCB7YXBwUGFja2FnZSwgYXBwQWN0aXZpdHl9ID0gYXdhaXQgdGhpcy5nZXRGb2N1c2VkUGFja2FnZUFuZEFjdGl2aXR5KCk7XG4gICAgbGV0IGZ1bGx5UXVhbGlmaWVkQWN0aXZpdHkgPSBhcHBBY3Rpdml0eS5zdGFydHNXaXRoKCcuJykgPyBgJHthcHBQYWNrYWdlfSR7YXBwQWN0aXZpdHl9YCA6IGFwcEFjdGl2aXR5O1xuICAgIGxvZy5kZWJ1ZyhgRm91bmQgcGFja2FnZTogJyR7YXBwUGFja2FnZX0nIGFuZCBmdWxseSBxdWFsaWZpZWQgYWN0aXZpdHkgbmFtZSA6ICcke2Z1bGx5UXVhbGlmaWVkQWN0aXZpdHl9J2ApO1xuICAgIGxldCBmb3VuZEFjdCA9ICgoYXBwUGFja2FnZSA9PT0gcGtnKSAmJlxuICAgICAgICAgICAgICAgICAgICAoXy5maW5kSW5kZXgocG9zc2libGVBY3Rpdml0eVBhdHRlcm5zLCAocG9zc2libGVQYXR0ZXJuKSA9PiBwb3NzaWJsZVBhdHRlcm4udGVzdChmdWxseVF1YWxpZmllZEFjdGl2aXR5KSkgIT09IC0xKSk7XG4gICAgaWYgKCghbm90ICYmIGZvdW5kQWN0KSB8fCAobm90ICYmICFmb3VuZEFjdCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbG9nLmRlYnVnKCdJbmNvcnJlY3QgcGFja2FnZSBhbmQgYWN0aXZpdHkuIFJldHJ5aW5nLicpO1xuICAgIC8vIGNvb2wgZG93biBzbyB3ZSdyZSBub3Qgb3ZlcmxvYWRpbmcgZGV2aWNlIHdpdGggcmVxdWVzdHNcbiAgICBhd2FpdCBzbGVlcCg3NTApO1xuICB9XG4gIGxldCBhY3Rpdml0eU1lc3NhZ2UgPSBwb3NzaWJsZUFjdGl2aXR5TmFtZXMuam9pbihcIiBvciBcIik7XG4gIGxvZy5lcnJvckFuZFRocm93KGAke3BrZ30vJHthY3Rpdml0eU1lc3NhZ2V9IG5ldmVyICR7bm90ID8gJ3N0b3BwZWQnIDogJ3N0YXJ0ZWQnfWApO1xufTtcblxuYXBrVXRpbHNNZXRob2RzLndhaXRGb3JBY3Rpdml0eSA9IGFzeW5jIGZ1bmN0aW9uIChwa2csIGFjdCwgd2FpdE1zID0gMjAwMDApIHtcbiAgYXdhaXQgdGhpcy53YWl0Rm9yQWN0aXZpdHlPck5vdChwa2csIGFjdCwgZmFsc2UsIHdhaXRNcyk7XG59O1xuXG5hcGtVdGlsc01ldGhvZHMud2FpdEZvck5vdEFjdGl2aXR5ID0gYXN5bmMgZnVuY3Rpb24gKHBrZywgYWN0LCB3YWl0TXMgPSAyMDAwMCkge1xuICBhd2FpdCB0aGlzLndhaXRGb3JBY3Rpdml0eU9yTm90KHBrZywgYWN0LCB0cnVlLCB3YWl0TXMpO1xufTtcblxuYXBrVXRpbHNNZXRob2RzLnVuaW5zdGFsbEFwayA9IGFzeW5jIGZ1bmN0aW9uIChwa2cpIHtcbiAgbG9nLmRlYnVnKGBVbmluc3RhbGxpbmcgJHtwa2d9YCk7XG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy5mb3JjZVN0b3AocGtnKTtcbiAgICBsZXQgc3Rkb3V0ID0gYXdhaXQgdGhpcy5hZGJFeGVjKFsndW5pbnN0YWxsJywgcGtnXSwge3RpbWVvdXQ6IDIwMDAwfSk7XG4gICAgc3Rkb3V0ID0gc3Rkb3V0LnRyaW0oKTtcbiAgICAvLyBzdGRvdXQgbWF5IGNvbnRhaW4gd2FybmluZ3MgbWVhbmluZyBzdWNjZXNzIGlzIG5vdCBvbiB0aGUgZmlyc3QgbGluZS5cbiAgICBpZiAoc3Rkb3V0LmluZGV4T2YoXCJTdWNjZXNzXCIpICE9PSAtMSkge1xuICAgICAgbG9nLmluZm8oXCJBcHAgd2FzIHVuaW5zdGFsbGVkXCIpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZy5pbmZvKFwiQXBwIHdhcyBub3QgdW5pbnN0YWxsZWQsIG1heWJlIGl0IHdhc24ndCBvbiBkZXZpY2U/XCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBVbmFibGUgdG8gdW5pbnN0YWxsIEFQSy4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICB9XG59O1xuXG5hcGtVdGlsc01ldGhvZHMuaW5zdGFsbEZyb21EZXZpY2VQYXRoID0gYXN5bmMgZnVuY3Rpb24gKGFwa1BhdGhPbkRldmljZSwgb3B0cyA9IHt9KSB7XG4gIGxldCBzdGRvdXQgPSBhd2FpdCB0aGlzLnNoZWxsKFsncG0nLCAnaW5zdGFsbCcsICctcicsIGFwa1BhdGhPbkRldmljZV0sIG9wdHMpO1xuICBpZiAoc3Rkb3V0LmluZGV4T2YoXCJGYWlsdXJlXCIpICE9PSAtMSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBSZW1vdGUgaW5zdGFsbCBmYWlsZWQ6ICR7c3Rkb3V0fWApO1xuICB9XG59O1xuXG5hcGtVdGlsc01ldGhvZHMuaW5zdGFsbCA9IGFzeW5jIGZ1bmN0aW9uIChhcGssIHJlcGxhY2UgPSB0cnVlLCB0aW1lb3V0ID0gNjAwMDApIHtcbiAgaWYgKHJlcGxhY2UpIHtcbiAgICBsZXQgc3Rkb3V0ID0gYXdhaXQgdGhpcy5hZGJFeGVjKFsnaW5zdGFsbCcsICctcicsIGFwa10sIHt0aW1lb3V0fSk7XG4gICAgaWYgKHN0ZG91dC5tYXRjaCgvSU5TVEFMTF8uKl9GQUlMRUQvKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdhcGsgaW5zdGFsbCBmYWlsZWQnKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5hZGJFeGVjKFsnaW5zdGFsbCcsIGFwa10sIHt0aW1lb3V0fSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBvbiBzb21lIHN5c3RlbXMgdGhpcyB3aWxsIHRocm93IGFuIGVycm9yIGlmIHRoZSBhcHAgYWxyZWFkeVxuICAgICAgLy8gZXhpc3RzXG4gICAgICBpZiAoZXJyLm1lc3NhZ2UuaW5kZXhPZignSU5TVEFMTF9GQUlMRURfQUxSRUFEWV9FWElTVFMnKSA9PT0gLTEpIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgICAgbG9nLmRlYnVnKGBBcHBsaWNhdGlvbiAnJHthcGt9JyBhbHJlYWR5IGluc3RhbGxlZC4gQ29udGludWluZy5gKTtcbiAgICB9XG4gIH1cbn07XG5cbmFwa1V0aWxzTWV0aG9kcy5pbnN0YWxsT3JVcGdyYWRlID0gYXN5bmMgZnVuY3Rpb24gKGFwaywgcGtnID0gbnVsbCwgdGltZW91dCA9IDYwMDAwKSB7XG4gIGxldCBhcGtJbmZvID0gbnVsbDtcbiAgaWYgKCFwa2cpIHtcbiAgICBhcGtJbmZvID0gYXdhaXQgdGhpcy5nZXRBcGtJbmZvKGFwayk7XG4gICAgcGtnID0gYXBrSW5mby5uYW1lO1xuICB9XG4gIGlmICghcGtnKSB7XG4gICAgbG9nLndhcm4oYENhbm5vdCByZWFkIHRoZSBwYWNrYWdlIG5hbWUgb2YgJHthcGt9LiBBc3N1bWluZyBjb3JyZWN0IGFwcCB2ZXJzaW9uIGlzIGFscmVhZHkgaW5zdGFsbGVkYCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghYXdhaXQgdGhpcy5pc0FwcEluc3RhbGxlZChwa2cpKSB7XG4gICAgYXdhaXQgdGhpcy5pbnN0YWxsKGFwaywgZmFsc2UsIHRpbWVvdXQpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBwa2dJbmZvID0gYXdhaXQgdGhpcy5nZXRQYWNrYWdlSW5mbyhwa2cpO1xuICBsb2cuZGVidWcoXCJ4eHh4eHh4eHh4eHh4eHh4IHBrZ2luZm94eHh4eHhcIilcbiAgbG9nLmRlYnVnKHBrZ0luZm8pXG4gIGxvZy5kZWJ1ZygneHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHgnKVxuICBjb25zdCBwa2dWZXJzaW9uQ29kZSA9IHBrZ0luZm8udmVyc2lvbkNvZGU7XG4gIGlmICghYXBrSW5mbykge1xuICAgIGFwa0luZm8gPSBhd2FpdCB0aGlzLmdldEFwa0luZm8oYXBrKTtcbiAgfVxuICBjb25zdCBhcGtWZXJzaW9uQ29kZSA9IGFwa0luZm8udmVyc2lvbkNvZGU7XG4gIGlmIChfLmlzVW5kZWZpbmVkKGFwa1ZlcnNpb25Db2RlKSB8fCBfLmlzVW5kZWZpbmVkKHBrZ1ZlcnNpb25Db2RlKSkge1xuICAgIGxvZy53YXJuKGBDYW5ub3QgcmVhZCB2ZXJzaW9uIGNvZGVzIG9mICR7YXBrfSBhbmQvb3IgJHtwa2d9LiBBc3N1bWluZyBjb3JyZWN0IGFwcCB2ZXJzaW9uIGlzIGFscmVhZHkgaW5zdGFsbGVkYCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwa2dWZXJzaW9uQ29kZSA+PSBhcGtWZXJzaW9uQ29kZSkge1xuICAgIGxvZy5kZWJ1ZyhgVGhlIGluc3RhbGxlZCBcIiR7cGtnfVwiIHBhY2thZ2UgZG9lcyBub3QgcmVxdWlyZSB1cGdyYWRlICgke3BrZ1ZlcnNpb25Db2RlfSA+PSAke2Fwa1ZlcnNpb25Db2RlfSlgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgbG9nLmRlYnVnKGBUaGUgaW5zdGFsbGVkIFwiJHtwa2d9XCIgcGFja2FnZSBpcyBvbGRlciB0aGFuICR7YXBrfSAoJHtwa2dWZXJzaW9uQ29kZX0gPCAke2Fwa1ZlcnNpb25Db2RlfSkuIGAgK1xuICAgICAgICAgICAgYEV4ZWN1dGluZyB1cGdyYWRlYCk7XG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy5pbnN0YWxsKGFwaywgdHJ1ZSwgdGltZW91dCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy53YXJuKGBDYW5ub3QgdXBncmFkZSAke3BrZ30gYmVjYXVzZSBvZiBcIiR7ZXJyLm1lc3NhZ2V9XCIuIFRyeWluZyBmdWxsIHJlaW5zdGFsbGApO1xuICAgIGlmICghYXdhaXQgdGhpcy51bmluc3RhbGxBcGsocGtnKSkge1xuICAgICAgbG9nLmVycm9yQW5kVGhyb3coYFwiJHtwa2d9XCIgcGFja2FnZSBjYW5ub3QgYmUgdW5pbnN0YWxsZWRgKTtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5pbnN0YWxsKGFwaywgZmFsc2UsIHRpbWVvdXQpO1xuICB9XG59O1xuXG5hcGtVdGlsc01ldGhvZHMuZXh0cmFjdFN0cmluZ3NGcm9tQXBrID0gYXN5bmMgZnVuY3Rpb24gKGFwaywgbGFuZ3VhZ2UsIG91dCkge1xuICBsb2cuZGVidWcoYEV4dHJhY3Rpbmcgc3RyaW5ncyBmb3IgbGFuZ3VhZ2U6ICR7bGFuZ3VhZ2UgfHwgXCJkZWZhdWx0XCJ9YCk7XG4gIGxldCBzdHJpbmdzSnNvbiA9ICdzdHJpbmdzLmpzb24nO1xuICBsZXQgbG9jYWxQYXRoO1xuICBpZiAoIWxhbmd1YWdlKSB7XG4gICAgbGFuZ3VhZ2UgPSBhd2FpdCB0aGlzLmdldERldmljZUxhbmd1YWdlKCk7XG4gIH1cbiAgbGV0IGFwa1Rvb2xzID0gdGhpcy5qYXJzWydhcHBpdW1fYXBrX3Rvb2xzLmphciddO1xuICBsZXQgYXJncyA9IFsnLWphcicsIGFwa1Rvb2xzLCAnc3RyaW5nc0Zyb21BcGsnLCBhcGssIG91dCwgbGFuZ3VhZ2VdO1xuICBsZXQgZmlsZURhdGEsIGFwa1N0cmluZ3M7XG4gIHRyeSB7XG4gICAgYXdhaXQgZXhlYygnamF2YScsIGFyZ3MpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmRlYnVnKGBObyBzdHJpbmdzLnhtbCBmb3IgbGFuZ3VhZ2UgJyR7bGFuZ3VhZ2V9JywgZ2V0dGluZyBkZWZhdWx0IGAgK1xuICAgICAgICAgICAgICBgc3RyaW5ncy54bWxgKTtcbiAgICBhcmdzLnBvcCgpO1xuICAgIGF3YWl0IGV4ZWMoJ2phdmEnLCBhcmdzKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9nLmRlYnVnKFwiUmVhZGluZyBzdHJpbmdzIGZyb20gY29udmVydGVkIHN0cmluZ3MuanNvblwiKTtcbiAgICBsb2NhbFBhdGggPSBwYXRoLmpvaW4ob3V0LCBzdHJpbmdzSnNvbik7XG4gICAgZmlsZURhdGEgPSBhd2FpdCBmcy5yZWFkRmlsZShsb2NhbFBhdGgsICd1dGY4Jyk7XG4gICAgYXBrU3RyaW5ncyA9IEpTT04ucGFyc2UoZmlsZURhdGEpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGZpbGVEYXRhKSB7XG4gICAgICBsb2cuZGVidWcoYENvbnRlbnQgc3RhcnRlZCB3aXRoOiAke2ZpbGVEYXRhLnNsaWNlKDAsIDMwMCl9YCk7XG4gICAgfVxuICAgIGxldCBtc2cgPSBgQ291bGQgbm90IHBhcnNlIHN0cmluZ3MgZnJvbSBzdHJpbmdzLmpzb24uIE9yaWdpbmFsIGAgK1xuICAgICAgICAgICAgICBgZXJyb3I6ICR7ZS5tZXNzYWdlfWA7XG4gICAgbG9nLmVycm9yQW5kVGhyb3cobXNnKTtcbiAgfVxuICByZXR1cm4ge2Fwa1N0cmluZ3MsIGxvY2FsUGF0aH07XG59O1xuXG5hcGtVdGlsc01ldGhvZHMuZ2V0RGV2aWNlTGFuZ3VhZ2UgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGxldCBsYW5ndWFnZTtcbiAgaWYgKGF3YWl0IHRoaXMuZ2V0QXBpTGV2ZWwoKSA8IDIzKSB7XG4gICAgbGFuZ3VhZ2UgPSBhd2FpdCB0aGlzLmdldERldmljZVN5c0xhbmd1YWdlKCk7XG4gICAgaWYgKCFsYW5ndWFnZSkge1xuICAgICAgbGFuZ3VhZ2UgPSBhd2FpdCB0aGlzLmdldERldmljZVByb2R1Y3RMYW5ndWFnZSgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsYW5ndWFnZSA9IChhd2FpdCB0aGlzLmdldERldmljZUxvY2FsZSgpKS5zcGxpdChcIi1cIilbMF07XG4gIH1cbiAgcmV0dXJuIGxhbmd1YWdlO1xufTtcblxuYXBrVXRpbHNNZXRob2RzLnNldERldmljZUxhbmd1YWdlID0gYXN5bmMgZnVuY3Rpb24gKGxhbmd1YWdlKSB7XG4gIC8vIHRoaXMgbWV0aG9kIGlzIG9ubHkgdXNlZCBpbiBBUEkgPCAyM1xuICBhd2FpdCB0aGlzLnNldERldmljZVN5c0xhbmd1YWdlKGxhbmd1YWdlKTtcbn07XG5cbmFwa1V0aWxzTWV0aG9kcy5nZXREZXZpY2VDb3VudHJ5ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAvLyB0aGlzIG1ldGhvZCBpcyBvbmx5IHVzZWQgaW4gQVBJIDwgMjNcbiAgbGV0IGNvdW50cnkgPSBhd2FpdCB0aGlzLmdldERldmljZVN5c0NvdW50cnkoKTtcbiAgaWYgKCFjb3VudHJ5KSB7XG4gICAgY291bnRyeSA9IGF3YWl0IHRoaXMuZ2V0RGV2aWNlUHJvZHVjdENvdW50cnkoKTtcbiAgfVxuICByZXR1cm4gY291bnRyeTtcbn07XG5cbmFwa1V0aWxzTWV0aG9kcy5zZXREZXZpY2VDb3VudHJ5ID0gYXN5bmMgZnVuY3Rpb24gKGNvdW50cnkpIHtcbiAgLy8gdGhpcyBtZXRob2QgaXMgb25seSB1c2VkIGluIEFQSSA8IDIzXG4gIGF3YWl0IHRoaXMuc2V0RGV2aWNlU3lzQ291bnRyeShjb3VudHJ5KTtcbn07XG5cbmFwa1V0aWxzTWV0aG9kcy5nZXREZXZpY2VMb2NhbGUgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIC8vIHRoaXMgbWV0aG9kIGlzIG9ubHkgdXNlZCBpbiBBUEkgPj0gMjNcbiAgbGV0IGxvY2FsZSA9IGF3YWl0IHRoaXMuZ2V0RGV2aWNlU3lzTG9jYWxlKCk7XG4gIGlmICghbG9jYWxlKSB7XG4gICAgbG9jYWxlID0gYXdhaXQgdGhpcy5nZXREZXZpY2VQcm9kdWN0TG9jYWxlKCk7XG4gIH1cbiAgcmV0dXJuIGxvY2FsZTtcbn07XG5cbmFwa1V0aWxzTWV0aG9kcy5zZXREZXZpY2VMb2NhbGUgPSBhc3luYyBmdW5jdGlvbiAobG9jYWxlKSB7XG4gIC8vIHRoaXMgbWV0aG9kIGlzIG9ubHkgdXNlZCBpbiBBUEkgPj0gMjNcbiAgYXdhaXQgdGhpcy5zZXREZXZpY2VTeXNMb2NhbGUobG9jYWxlKTtcbn07XG5cbmFwa1V0aWxzTWV0aG9kcy5nZXRQYWNrYWdlTmFtZSA9IGFzeW5jIGZ1bmN0aW9uIChhcGspIHtcbiAgbGV0IGFyZ3MgPSBbJ2R1bXAnLCAnYmFkZ2luZycsIGFwa107XG4gIGF3YWl0IHRoaXMuaW5pdEFhcHQoKTtcbiAgbGV0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYyh0aGlzLmJpbmFyaWVzLmFhcHQsIGFyZ3MpO1xuICBsZXQgYXBrUGFja2FnZSA9IG5ldyBSZWdFeHAoL3BhY2thZ2U6IG5hbWU9JyhbXiddKyknL2cpLmV4ZWMoc3Rkb3V0KTtcbiAgaWYgKGFwa1BhY2thZ2UgJiYgYXBrUGFja2FnZS5sZW5ndGggPj0gMikge1xuICAgIGFwa1BhY2thZ2UgPSBhcGtQYWNrYWdlWzFdO1xuICB9IGVsc2Uge1xuICAgIGFwa1BhY2thZ2UgPSBudWxsO1xuICB9XG4gIHJldHVybiBhcGtQYWNrYWdlO1xufTtcblxuYXBrVXRpbHNNZXRob2RzLmdldEFwa0luZm8gPSBhc3luYyBmdW5jdGlvbiAoYXBrUGF0aCkge1xuICBpZiAoIWF3YWl0IGZzLmV4aXN0cyhhcGtQYXRoKSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBUaGUgZmlsZSBhdCBwYXRoICR7YXBrUGF0aH0gZG9lcyBub3QgZXhpc3Qgb3IgaXMgbm90IGFjY2Vzc2libGVgKTtcbiAgfVxuICBhd2FpdCB0aGlzLmluaXRBYXB0KCk7XG4gIHRyeSB7XG4gICAgY29uc3Qge3N0ZG91dH0gPSBhd2FpdCBleGVjKHRoaXMuYmluYXJpZXMuYWFwdCwgWydkJywgJ2JhZGdpbmcnLCBhcGtQYXRoXSk7XG4gICAgY29uc3QgbWF0Y2hlcyA9IG5ldyBSZWdFeHAoL3BhY2thZ2U6IG5hbWU9JyhbXiddKyknIHZlcnNpb25Db2RlPScoXFxkKyknIHZlcnNpb25OYW1lPScoW14nXSspJy8pLmV4ZWMoc3Rkb3V0KTtcbiAgICBpZiAobWF0Y2hlcykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogbWF0Y2hlc1sxXSxcbiAgICAgICAgdmVyc2lvbkNvZGU6IHBhcnNlSW50KG1hdGNoZXNbMl0sIDEwKSxcbiAgICAgICAgdmVyc2lvbk5hbWU6IG1hdGNoZXNbM11cbiAgICAgIH07XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cud2FybihgRXJyb3IgXCIke2Vyci5tZXNzYWdlfVwiIHdoaWxlIGdldHRpbmcgYmFkZ2luZyBpbmZvYCk7XG4gIH1cbiAgcmV0dXJuIHt9O1xufTtcblxuYXBrVXRpbHNNZXRob2RzLmdldFBhY2thZ2VJbmZvID0gYXN5bmMgZnVuY3Rpb24gKHBrZykge1xuICBsb2cuZGVidWcoYEdldHRpbmcgcGFja2FnZSBpbmZvIGZvciAke3BrZ31gKTtcbiAgbGV0IHJlc3VsdCA9IHtuYW1lOiBwa2d9O1xuICB0cnkge1xuICAgIGNvbnN0IHN0ZG91dCA9IGF3YWl0IHRoaXMuc2hlbGwoWydkdW1wc3lzJywgJ3BhY2thZ2UnLCBwa2ddKTtcbiAgICBjb25zdCB2ZXJzaW9uTmFtZU1hdGNoID0gbmV3IFJlZ0V4cCgvdmVyc2lvbk5hbWU9KFtcXGQrXFwuXSspLykuZXhlYyhzdGRvdXQpO1xuICAgIGlmICh2ZXJzaW9uTmFtZU1hdGNoKSB7XG4gICAgICByZXN1bHQudmVyc2lvbk5hbWUgPSB2ZXJzaW9uTmFtZU1hdGNoWzFdO1xuICAgIH1cbiAgICBjb25zdCB2ZXJzaW9uQ29kZU1hdGNoID0gbmV3IFJlZ0V4cCgvdmVyc2lvbkNvZGU9KFxcZCspLykuZXhlYyhzdGRvdXQpO1xuICAgIGlmICh2ZXJzaW9uQ29kZU1hdGNoKSB7XG4gICAgICByZXN1bHQudmVyc2lvbkNvZGUgPSBwYXJzZUludCh2ZXJzaW9uQ29kZU1hdGNoWzFdLCAxMCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy53YXJuKGBFcnJvciBcIiR7ZXJyLm1lc3NhZ2V9XCIgd2hpbGUgZHVtcGluZyBwYWNrYWdlIGluZm9gKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgYXBrVXRpbHNNZXRob2RzO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
