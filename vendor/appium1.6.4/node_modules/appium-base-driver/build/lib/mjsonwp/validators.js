'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function isNumber(o) {
  return _lodash2['default'].isNumber(o) || !_lodash2['default'].isNaN(parseInt(o)) || !_lodash2['default'].isNaN(parseFloat(o));
}

function msValidator(ms) {
  if (!_lodash2['default'].isNumber(ms) || ms < 0) {
    throw new Error('Wait ms must be a number equal to 0 or greater');
  }
}

var validators = {
  setUrl: function setUrl(url) {
    // either an `xyz://`, `about:`, or `data:` scheme is allowed
    if (!url || !url.match(/^([a-zA-Z0-9_-]+:\/\/)|(about:)|(data:)/)) {
      throw new Error('Url or Uri must start with <scheme>://');
    }
  },
  implicitWait: function implicitWait(ms) {
    msValidator(ms);
  },
  asyncScriptTimeout: function asyncScriptTimeout(ms) {
    msValidator(ms);
  },
  timeouts: function timeouts(type, ms) {
    msValidator(ms);
    if (!_lodash2['default'].includes(['script', 'implicit', 'page load', 'command'], type)) {
      throw new Error('\'' + type + '\' is not a valid timeout type');
    }
  },
  clickCurrent: function clickCurrent(button) {
    if (!(isNumber(button) || _lodash2['default'].isUndefined(button)) || (button < 0 || button > 2)) {
      throw new Error('Click button must be 0, 1, or 2');
    }
  },
  setNetworkConnection: function setNetworkConnection(type) {
    if (!isNumber(type) || [0, 1, 2, 4, 6].indexOf(type) === -1) {
      throw new Error('Network type must be one of 0, 1, 2, 4, 6');
    }
  }
};

exports.validators = validators;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9tanNvbndwL3ZhbGlkYXRvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7c0JBQWMsUUFBUTs7OztBQUd0QixTQUFTLFFBQVEsQ0FBRSxDQUFDLEVBQUU7QUFDcEIsU0FBTyxvQkFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDMUU7O0FBRUQsU0FBUyxXQUFXLENBQUUsRUFBRSxFQUFFO0FBQ3hCLE1BQUksQ0FBQyxvQkFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRTtBQUM3QixVQUFNLElBQUksS0FBSyxDQUFDLGdEQUFnRCxDQUFDLENBQUM7R0FDbkU7Q0FDRjs7QUFFRCxJQUFNLFVBQVUsR0FBRztBQUNqQixRQUFNLEVBQUUsZ0JBQUMsR0FBRyxFQUFLOztBQUVmLFFBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLHlDQUF5QyxDQUFDLEVBQUU7QUFDakUsWUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0tBQzNEO0dBQ0Y7QUFDRCxjQUFZLEVBQUUsc0JBQUMsRUFBRSxFQUFLO0FBQ3BCLGVBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNqQjtBQUNELG9CQUFrQixFQUFFLDRCQUFDLEVBQUUsRUFBSztBQUMxQixlQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDakI7QUFDRCxVQUFRLEVBQUUsa0JBQUMsSUFBSSxFQUFFLEVBQUUsRUFBSztBQUN0QixlQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDaEIsUUFBSSxDQUFDLG9CQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFNBQVMsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFO0FBQ3JFLFlBQU0sSUFBSSxLQUFLLFFBQUssSUFBSSxvQ0FBZ0MsQ0FBQztLQUMxRDtHQUNGO0FBQ0QsY0FBWSxFQUFFLHNCQUFDLE1BQU0sRUFBSztBQUN4QixRQUFJLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLG9CQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQSxBQUFDLEtBQUssTUFBTSxHQUFHLENBQUMsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFBLEFBQUMsRUFBRTtBQUM5RSxZQUFNLElBQUksS0FBSyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7S0FDcEQ7R0FDRjtBQUNELHNCQUFvQixFQUFFLDhCQUFDLElBQUksRUFBSztBQUM5QixRQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtBQUMzRCxZQUFNLElBQUksS0FBSyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7S0FDOUQ7R0FDRjtDQUNGLENBQUM7O1FBRU8sVUFBVSxHQUFWLFVBQVUiLCJmaWxlIjoibGliL21qc29ud3AvdmFsaWRhdG9ycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cblxuZnVuY3Rpb24gaXNOdW1iZXIgKG8pIHtcbiAgcmV0dXJuIF8uaXNOdW1iZXIobykgfHwgIV8uaXNOYU4ocGFyc2VJbnQobykpIHx8ICFfLmlzTmFOKHBhcnNlRmxvYXQobykpO1xufVxuXG5mdW5jdGlvbiBtc1ZhbGlkYXRvciAobXMpIHtcbiAgaWYgKCFfLmlzTnVtYmVyKG1zKSB8fCBtcyA8IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1dhaXQgbXMgbXVzdCBiZSBhIG51bWJlciBlcXVhbCB0byAwIG9yIGdyZWF0ZXInKTtcbiAgfVxufVxuXG5jb25zdCB2YWxpZGF0b3JzID0ge1xuICBzZXRVcmw6ICh1cmwpID0+IHtcbiAgICAvLyBlaXRoZXIgYW4gYHh5ejovL2AsIGBhYm91dDpgLCBvciBgZGF0YTpgIHNjaGVtZSBpcyBhbGxvd2VkXG4gICAgaWYgKCF1cmwgfHwgIXVybC5tYXRjaCgvXihbYS16QS1aMC05Xy1dKzpcXC9cXC8pfChhYm91dDopfChkYXRhOikvKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVcmwgb3IgVXJpIG11c3Qgc3RhcnQgd2l0aCA8c2NoZW1lPjovLycpO1xuICAgIH1cbiAgfSxcbiAgaW1wbGljaXRXYWl0OiAobXMpID0+IHtcbiAgICBtc1ZhbGlkYXRvcihtcyk7XG4gIH0sXG4gIGFzeW5jU2NyaXB0VGltZW91dDogKG1zKSA9PiB7XG4gICAgbXNWYWxpZGF0b3IobXMpO1xuICB9LFxuICB0aW1lb3V0czogKHR5cGUsIG1zKSA9PiB7XG4gICAgbXNWYWxpZGF0b3IobXMpO1xuICAgIGlmICghXy5pbmNsdWRlcyhbJ3NjcmlwdCcsICdpbXBsaWNpdCcsICdwYWdlIGxvYWQnLCAnY29tbWFuZCddLCB0eXBlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAnJHt0eXBlfScgaXMgbm90IGEgdmFsaWQgdGltZW91dCB0eXBlYCk7XG4gICAgfVxuICB9LFxuICBjbGlja0N1cnJlbnQ6IChidXR0b24pID0+IHtcbiAgICBpZiAoIShpc051bWJlcihidXR0b24pIHx8IF8uaXNVbmRlZmluZWQoYnV0dG9uKSkgfHwgKGJ1dHRvbiA8IDAgfHwgYnV0dG9uID4gMikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2xpY2sgYnV0dG9uIG11c3QgYmUgMCwgMSwgb3IgMicpO1xuICAgIH1cbiAgfSxcbiAgc2V0TmV0d29ya0Nvbm5lY3Rpb246ICh0eXBlKSA9PiB7XG4gICAgaWYgKCFpc051bWJlcih0eXBlKSB8fCBbMCwgMSwgMiwgNCwgNl0uaW5kZXhPZih0eXBlKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTmV0d29yayB0eXBlIG11c3QgYmUgb25lIG9mIDAsIDEsIDIsIDQsIDYnKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCB7IHZhbGlkYXRvcnMgfTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
