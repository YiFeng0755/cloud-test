import _ from 'lodash';
import { errors } from 'appium-base-driver';


let commands = {};


/**
 *
 * 查找lua元素  2017/4/24
 *
 */
commands.findLuaElement = async function (strategy, selector) {
    let result = await this.findLuaElOrEls(strategy, selector, false)
    result.IS_LUA = true
    return result
};

commands.findLuaElements = async function (strategy, selector) {

    let result = await this.findLuaElOrEls(strategy, selector, true);
    result.forEach(function (element) {
        element.IS_LUA = true
    })
    return result
};

commands.doFindLuaElementOrEls = async function (params) {
    return await this.testbundle.sendAction('find', params)
};

commands.findLuaElOrEls = async function (strategy, selector, mult, context = '') {
    this.validateLocatorStrategy(strategy);
    if (!selector) {
        throw new Error("Must provide a selector when finding elements");
    }
    let params = {
        strategy,
        selector,
        context,
        multiple: mult
    };
    let element;
    let doFind = async () => {
        try {
            element = await this.doFindLuaElementOrEls(params);
        } catch (err) {
            if (err.message && err.message.match(/An element could not be located/)) {
                // we are fine with this, just indicate a retry
                return false;
            }
            throw err;
        }
        // we want to return false if we want to potentially try again
        if (params.multiple) {
            return element && element.length !== 0;
        } else {
            return !_.isNull(element);
        }
    };

    try {
        await this.implicitWaitForCondition(doFind);
    } catch (err) {
        if (err.message && err.message.match(/Condition unmet/)) {
            // only get here if we are looking for multiple elements
            // condition was not met setting res to empty array
            element = [];
        } else {
            throw err;
        }
    }

    if (mult) {
        return element;
    } else {
        if (!element || _.size(element) === 0) {
            throw new errors.NoSuchElementError();
        }
        return element;
    }
};



export default commands;
