
let commands = {}, helpers = {};

/*
 * 点击lua元素 2017/4/24
 *
 */
commands.luaClick = async function (elementId) {
    return await this.testbundle.sendAction("element:click", {elementId});
};

/*
 * 获取元素属性 (文本: text)
 *
 */
commands.getLuaAttribute = async function (attribute, elementId) {
    let p = {attribute, elementId};
    return await this.testbundle.sendAction("element:getAttribute", p);
}

/*
 * 设置元素的值 (文本)
 *
 */
commands.setLuaValue = async function (keys, elementId) {
    return await this.setLuaElementValue(keys, elementId, false);
}
/*
 * 替换元素的值 (文本)
 *
 */
commands.luaReplaceValue = async function (keys, elementId) {
    return await this.setluaReplaceValue(keys, elementId, false);
}

/*
 *  元素是否displaed
 *
 */
commands.luaElementDisplayed = async function (elementId) {
    return await this.getLuaAttribute("displayed", elementId) === 'true';
}

/*
 * 元素是否enabled
 *
 */
commands.luaElementEnabled = async function (elementId) {
    return await this.getLuaAttribute("enabled", elementId) === 'true';
}

/*
 * 元素是否selected
 *
 */
commands.luaElementSelected = async function (elementId) {
    return await this.getLuaAttribute("selected", elementId) === 'true';
}

/*
 * 元素 location( x, y)
 *
 */
commands.getLuaLocation = async function(elementId) {
    return await this.testbundle.sendAction("element:getLocation", {elementId});
}

commands.getLuaLocationInView = async function (elementId) {
    return await this.getLuaLocation(elementId);
}

/*
 * 元素 size( width, height)
 */
commands.getLuaSize = async function (elementId) {
    return await this.testbundle.sendAction("element:getSize", {elementId});
}

helpers.setLuaElementValue = async function (keys, elementId, replace = false) {
    let text = keys;
    if (keys instanceof Array) {
        text = keys.join("");
    }
    let params = {
        elementId,
        text,
        replace,
        unicodeKeyboard: this.opts.unicodeKeyboard
    };
    return await this.testbundle.sendAction("element:setText", params);
};

helpers.setluaReplaceValue = async function (keys, elementId, replace = false) {
    let text = keys;
    if (keys instanceof Array) {
        text = keys.join("");
    }
    let params = {
        elementId,
        text,
        replace,
        unicodeKeyboard: this.opts.unicodeKeyboard
    };
    return await this.testbundle.sendAction("element:setText", params);
};

Object.assign(commands, helpers);
export default commands;
