'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _appiumChromedriver = require('appium-chromedriver');

var _appiumChromedriver2 = _interopRequireDefault(_appiumChromedriver);

var _desiredCaps = require('./desired-caps');

var _desiredCaps2 = _interopRequireDefault(_desiredCaps);

var _commandsIndex = require('./commands/index');

var _commandsIndex2 = _interopRequireDefault(_commandsIndex);

var _commandsContext = require('./commands/context');

var _androidHelpers = require('./android-helpers');

var _androidHelpers2 = _interopRequireDefault(_androidHelpers);

var _webviewHelpers = require('./webview-helpers');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumAdb = require('appium-adb');

var _appiumSupport = require('appium-support');

var _asyncbox = require('asyncbox');

var APP_EXTENSION = '.apk';
var DEVICE_PORT = 4725;
var TESTBUNDLE_PORT = 4724;

// This is a set of methods and paths that we never want to proxy to
// Chromedriver
var NO_PROXY = [['POST', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/context')], ['POST', new RegExp('^/session/[^/]+/appium')], ['GET', new RegExp('^/session/[^/]+/appium')], ['POST', new RegExp('^/session/[^/]+/touch/perform')], ['POST', new RegExp('^/session/[^/]+/touch/multi/perform')], ['POST', new RegExp('^/session/[^/]+/orientation')], ['GET', new RegExp('^/session/[^/]+/orientation')]];

var AndroidDriver = (function (_BaseDriver) {
    _inherits(AndroidDriver, _BaseDriver);

    function AndroidDriver() {
        var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
        var shouldValidateCaps = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

        _classCallCheck(this, AndroidDriver);

        _get(Object.getPrototypeOf(AndroidDriver.prototype), 'constructor', this).call(this, opts, shouldValidateCaps);

        this.locatorStrategies = ['xpath', 'name', 'id', 'class name', 'text','accessibility id', '-android uiautomator'];
        this.desiredCapConstraints = _desiredCaps2['default'];
        this.sessionChromedrivers = {};
        this.jwpProxyActive = false;
        this.jwpProxyAvoid = _lodash2['default'].clone(NO_PROXY);
        this.settings = new _appiumBaseDriver.DeviceSettings({ ignoreUnimportantViews: false }, this.onSettingsUpdate.bind(this));
        this.chromedriver = null;
        this.apkStrings = {};
        this.bootstrapPort = opts.bootstrapPort || DEVICE_PORT;
        this.testbundlePort = opts.testbundlePort || TESTBUNDLE_PORT;
        this.unlocker = _androidHelpers2['default'].unlocker;

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = _getIterator(_lodash2['default'].pairs(_commandsIndex2['default'])), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _step$value = _slicedToArray(_step.value, 2);

                var cmd = _step$value[0];
                var fn = _step$value[1];

                AndroidDriver.prototype[cmd] = fn;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator['return']) {
                    _iterator['return']();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }

    _createClass(AndroidDriver, [{
        key: 'createSession',
        value: function createSession(caps) {
            var sessionId, _ref, _ref2, serverDetails, defaultOpts, _helpers$getChromePkg, pkg, activity, _ref3,

            // get device udid for this session
            udid, emPort, networkSpeed;

            return _regeneratorRuntime.async(function createSession$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        context$2$0.prev = 0;
                        sessionId = undefined;
                        context$2$0.next = 4;
                        return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(AndroidDriver.prototype), 'createSession', this).call(this, caps));

                    case 4:
                        _ref = context$2$0.sent;
                        _ref2 = _slicedToArray(_ref, 1);
                        sessionId = _ref2[0];
                        serverDetails = {
                            platform: 'LINUX',
                            webStorageEnabled: false,
                            takesScreenshot: true,
                            javascriptEnabled: true,
                            databaseEnabled: false,
                            networkConnectionEnabled: true,
                            locationContextEnabled: false,
                            warnings: {},
                            desired: this.caps
                        };

                        this.caps = _Object$assign(serverDetails, this.caps);

                        // assigning defaults
                        context$2$0.next = 11;
                        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.staticDir());

                    case 11:
                        context$2$0.t0 = context$2$0.sent;
                        context$2$0.t1 = _appiumAdb.DEFAULT_ADB_PORT;
                        defaultOpts = {
                            action: "android.intent.action.MAIN",
                            category: "android.intent.category.LAUNCHER",
                            flags: "0x10200000",
                            disableAndroidWatchers: false,
                            tmpDir: context$2$0.t0,
                            fullReset: false,
                            autoLaunch: true,
                            adbPort: context$2$0.t1,
                            androidInstallTimeout: 90000
                        };

                        // 这里对opts.uuid字段没影响
                        _lodash2['default'].defaults(this.opts, defaultOpts);

                        if (this.opts.javaVersion) {
                            context$2$0.next = 19;
                            break;
                        }

                        context$2$0.next = 18;
                        return _regeneratorRuntime.awrap(_androidHelpers2['default'].getJavaVersion());

                    case 18:
                        this.opts.javaVersion = context$2$0.sent;

                    case 19:
                        this.useUnlockHelperApp = _lodash2['default'].isUndefined(this.caps.unlockType);

                        // not user visible via caps
                        if (this.opts.noReset === true) {
                            this.opts.fullReset = false;
                        }
                        if (this.opts.fullReset === true) {
                            this.opts.noReset = false;
                        }
                        this.opts.fastReset = !this.opts.fullReset && !this.opts.noReset;
                        this.opts.skipUninstall = this.opts.fastReset || this.opts.noReset;

                        this.curContext = this.defaultContextName();

                        if (this.isChromeSession) {
                            _logger2['default'].info("We're going to run a Chrome-based session");
                            _helpers$getChromePkg = _androidHelpers2['default'].getChromePkg(this.opts.browserName);
                            pkg = _helpers$getChromePkg.pkg;
                            activity = _helpers$getChromePkg.activity;

                            this.opts.appPackage = pkg;
                            this.opts.appActivity = activity;
                            _logger2['default'].info('Chrome-type package and activity are ' + pkg + ' and ' + activity);
                        }

                        if (this.opts.nativeWebScreenshot) {
                            this.jwpProxyAvoid.push(['GET', new RegExp('^/session/[^/]+/screenshot')]);
                        }

                        if (this.opts.reboot) {
                            this.setAvdFromCapabilities(caps);
                            this.addWipeDataToAvdArgs();
                        }context$2$0.next = 30;
                        return _regeneratorRuntime.awrap(_androidHelpers2['default'].getDeviceInfoFromCaps(this.opts));

                    case 30:
                        _ref3 = context$2$0.sent;
                        udid = _ref3.udid;
                        emPort = _ref3.emPort;

                        this.opts.udid = udid;
                        this.opts.emPort = emPort;

                        // set up an instance of ADB
                        context$2$0.next = 37;
                        return _regeneratorRuntime.awrap(_androidHelpers2['default'].createADB(this.opts.javaVersion, this.opts.udid, this.opts.emPort, this.opts.adbPort, this.opts.suppressKillServer, this.opts.remoteAdbHost));

                    case 37:
                        this.adb = context$2$0.sent;

                        if (this.helpers.isPackageOrBundle(this.opts.app)) {
                            // user provided package instead of app for 'app' capability, massage options
                            this.opts.appPackage = this.opts.app;
                            this.opts.app = null;
                        }

                        if (!this.opts.app) {
                            context$2$0.next = 48;
                            break;
                        }

                        context$2$0.next = 42;
                        return _regeneratorRuntime.awrap(this.helpers.configureApp(this.opts.app, APP_EXTENSION));

                    case 42:
                        this.opts.app = context$2$0.sent;

                        this.opts.appIsTemp = caps.app !== this.opts.app; // did we make a temporary copy?
                        context$2$0.next = 46;
                        return _regeneratorRuntime.awrap(this.checkAppPresent());

                    case 46:
                        context$2$0.next = 52;
                        break;

                    case 48:
                        if (!this.appOnDevice) {
                            context$2$0.next = 52;
                            break;
                        }

                        // the app isn't an actual app file but rather something we want to
                        // assume is on the device and just launch via the appPackage
                        _logger2['default'].info('App file was not listed, instead we\'re going to run ' + (this.opts.appPackage + ' directly on the device'));
                        context$2$0.next = 52;
                        return _regeneratorRuntime.awrap(this.checkPackagePresent());

                    case 52:
                        if (_lodash2['default'].isUndefined(this.opts.networkSpeed)) {
                            context$2$0.next = 60;
                            break;
                        }

                        if (this.isEmulator()) {
                            context$2$0.next = 57;
                            break;
                        }

                        _logger2['default'].warn("Sorry, networkSpeed capability is only available for emulators");
                        context$2$0.next = 60;
                        break;

                    case 57:
                        networkSpeed = _androidHelpers2['default'].ensureNetworkSpeed(this.adb, this.opts.networkSpeed);
                        context$2$0.next = 60;
                        return _regeneratorRuntime.awrap(this.adb.networkSpeed(networkSpeed));

                    case 60:
                        if (!_appiumSupport.util.hasValue(this.opts.gpsEnabled)) {
                            context$2$0.next = 68;
                            break;
                        }

                        if (!this.isEmulator()) {
                            context$2$0.next = 67;
                            break;
                        }

                        _logger2['default'].info('Trying to ' + (this.opts.gpsEnabled ? "enable" : "disable") + ' gps location provider');
                        context$2$0.next = 65;
                        return _regeneratorRuntime.awrap(this.adb.toggleGPSLocationProvider(this.opts.gpsEnabled));

                    case 65:
                        context$2$0.next = 68;
                        break;

                    case 67:
                        _logger2['default'].warn('Sorry! gpsEnabled capability is only available for emulators');

                    case 68:
                        context$2$0.next = 70;
                        return _regeneratorRuntime.awrap(this.startAndroidSession(this.opts));

                    case 70:
                        return context$2$0.abrupt('return', [sessionId, this.caps]);

                    case 73:
                        context$2$0.prev = 73;
                        context$2$0.t2 = context$2$0['catch'](0);
                        context$2$0.prev = 75;
                        context$2$0.next = 78;
                        return _regeneratorRuntime.awrap(this.deleteSession());

                    case 78:
                        context$2$0.next = 82;
                        break;

                    case 80:
                        context$2$0.prev = 80;
                        context$2$0.t3 = context$2$0['catch'](75);

                    case 82:
                        throw context$2$0.t2;

                    case 83:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this, [[0, 73], [75, 80]]);
        }
    }, {
        key: 'isEmulator',
        value: function isEmulator() {
            return !!(this.opts.avd || /emulator/.test(this.opts.udid));
        }
    }, {
        key: 'setAvdFromCapabilities',
        value: function setAvdFromCapabilities(caps) {
            if (this.opts.avd) {
                _logger2['default'].info('avd name defined, ignoring device name and platform version');
            } else {
                if (!caps.deviceName) {
                    _logger2['default'].errorAndThrow('avd or deviceName should be specified when reboot option is enables');
                }
                if (!caps.platformVersion) {
                    _logger2['default'].errorAndThrow('avd or platformVersion should be specified when reboot option is enabled');
                }
                var avdDevice = caps.deviceName.replace(/[^a-zA-Z0-9_.]/g, "-");
                this.opts.avd = avdDevice + '__' + caps.platformVersion;
            }
        }
    }, {
        key: 'addWipeDataToAvdArgs',
        value: function addWipeDataToAvdArgs() {
            if (!this.opts.avdArgs) {
                this.opts.avdArgs = '-wipe-data';
            } else if (this.opts.avdArgs.toLowerCase().indexOf("-wipe-data") === -1) {
                this.opts.avdArgs += ' -wipe-data';
            }
        }
    }, {
        key: 'onSettingsUpdate',
        value: function onSettingsUpdate(key, value) {
            return _regeneratorRuntime.async(function onSettingsUpdate$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        if (!(key === "ignoreUnimportantViews")) {
                            context$2$0.next = 3;
                            break;
                        }

                        context$2$0.next = 3;
                        return _regeneratorRuntime.awrap(this.setCompressedLayoutHierarchy(value));

                    case 3:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }, {
        key: 'startAndroidSession',
        value: function startAndroidSession() {
            return _regeneratorRuntime.async(function startAndroidSession$(context$2$0) {
                var _this = this;

                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        _logger2['default'].info('Starting Android session');
                        // set up the device to run on (real or emulator, etc)
                        context$2$0.next = 3;
                        return _regeneratorRuntime.awrap(_androidHelpers2['default'].initDevice(this.adb, this.opts));

                    case 3:
                        this.defaultIME = context$2$0.sent;

                        // set actual device name, udid, platform version, screen size, model and manufacturer details
                        this.caps.deviceName = this.adb.curDeviceId;
                        this.caps.deviceUDID = this.opts.udid;
                        context$2$0.next = 8;
                        return _regeneratorRuntime.awrap(this.adb.getPlatformVersion());

                    case 8:
                        this.caps.platformVersion = context$2$0.sent;
                        context$2$0.next = 11;
                        return _regeneratorRuntime.awrap(this.adb.getScreenSize());

                    case 11:
                        this.caps.deviceScreenSize = context$2$0.sent;
                        context$2$0.next = 14;
                        return _regeneratorRuntime.awrap(this.adb.getModel());

                    case 14:
                        this.caps.deviceModel = context$2$0.sent;
                        context$2$0.next = 17;
                        return _regeneratorRuntime.awrap(this.adb.getManufacturer());

                    case 17:
                        this.caps.deviceManufacturer = context$2$0.sent;

                        if (!this.opts.autoLaunch) {
                            context$2$0.next = 21;
                            break;
                        }

                        context$2$0.next = 21;
                        return _regeneratorRuntime.awrap(this.initAUT());

                    case 21:

                        _logger2['default'].debug('mmmmmmmmmmmmmmmmmmmmmmmmmmmm-----testbundle start--------------');
                        this.testbundle = new _androidHelpers2['default'].testbundle(this.adb, this.testbundlePort);
                        context$2$0.next = 25;
                        return _regeneratorRuntime.awrap(this.testbundle.start());

                    case 25:
                        this.testbundle.onUnexpectedShutdown['catch'](function callee$2$0(err) {
                            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                                while (1) switch (context$3$0.prev = context$3$0.next) {
                                    case 0:
                                        if (this.testbundle.ignoreUnexpectedShutdown) {
                                            context$3$0.next = 4;
                                            break;
                                        }

                                        _logger2['default'].debug('start testbundle unexpected shutdown');
                                        context$3$0.next = 4;
                                        return _regeneratorRuntime.awrap(this.startUnexpectedShutdown(err));

                                    case 4:
                                    case 'end':
                                        return context$3$0.stop();
                                }
                            }, null, _this);
                        });
                        _logger2['default'].debug('mmmmmmmmmmmmmmmmmmmmmmmmmmmmm-----testbundle end-------------');

                        _logger2['default'].debug('mmmmmmmmmmmmmmmmmmmmmmmmmmm-----bootstrap start---------------');
                        // start UiAutomator
                        this.bootstrap = new _androidHelpers2['default'].bootstrap(this.adb, this.bootstrapPort, this.opts.websocket);
                        context$2$0.next = 31;
                        return _regeneratorRuntime.awrap(this.bootstrap.start(this.opts.appPackage, this.opts.disableAndroidWatchers, this.opts.acceptSslCerts));

                    case 31:
                        // handling unexpected shutdown
                        this.bootstrap.onUnexpectedShutdown['catch'](function callee$2$0(err) {
                            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                                while (1) switch (context$3$0.prev = context$3$0.next) {
                                    case 0:
                                        if (this.bootstrap.ignoreUnexpectedShutdown) {
                                            context$3$0.next = 3;
                                            break;
                                        }

                                        context$3$0.next = 3;
                                        return _regeneratorRuntime.awrap(this.startUnexpectedShutdown(err));

                                    case 3:
                                    case 'end':
                                        return context$3$0.stop();
                                }
                            }, null, _this);
                        });
                        _logger2['default'].debug('mmmmmmmmmmmmmmmmmmmmmmmmmmm-----bootstrap end---------------');

                        // Let's try to unlock the device
                        context$2$0.next = 35;
                        return _regeneratorRuntime.awrap(_androidHelpers2['default'].unlock(this, this.adb, this.caps));

                    case 35:
                        if (!this.opts.ignoreUnimportantViews) {
                            context$2$0.next = 38;
                            break;
                        }

                        context$2$0.next = 38;
                        return _regeneratorRuntime.awrap(this.settings.update({ ignoreUnimportantViews: this.opts.ignoreUnimportantViews }));

                    case 38:
                        if (!this.isChromeSession) {
                            context$2$0.next = 46;
                            break;
                        }

                        context$2$0.next = 41;
                        return _regeneratorRuntime.awrap(this.startChromeSession());

                    case 41:
                        if (!this.shouldDismissChromeWelcome()) {
                            context$2$0.next = 44;
                            break;
                        }

                        context$2$0.next = 44;
                        return _regeneratorRuntime.awrap(this.dismissChromeWelcome());

                    case 44:
                        context$2$0.next = 49;
                        break;

                    case 46:
                        if (!this.opts.autoLaunch) {
                            context$2$0.next = 49;
                            break;
                        }

                        context$2$0.next = 49;
                        return _regeneratorRuntime.awrap(this.startAUT());

                    case 49:
                        context$2$0.next = 51;
                        return _regeneratorRuntime.awrap(this.initAutoWebview());

                    case 51:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }, {
        key: 'shouldDismissChromeWelcome',
        value: function shouldDismissChromeWelcome() {
            return !_lodash2['default'].isUndefined(this.opts.chromeOptions) && _lodash2['default'].isArray(this.opts.chromeOptions.args) && this.opts.chromeOptions.args.indexOf('--no-first-run') !== -1;
        }
    }, {
        key: 'dismissChromeWelcome',
        value: function dismissChromeWelcome() {
            var activity, el, _el;

            return _regeneratorRuntime.async(function dismissChromeWelcome$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        _logger2['default'].info("Trying to dismiss Chrome welcome");
                        context$2$0.next = 3;
                        return _regeneratorRuntime.awrap(this.getCurrentActivity());

                    case 3:
                        activity = context$2$0.sent;

                        if (!(activity !== "org.chromium.chrome.browser.firstrun.FirstRunActivity")) {
                            context$2$0.next = 7;
                            break;
                        }

                        _logger2['default'].info("Chrome welcome dialog never showed up! Continuing");
                        return context$2$0.abrupt('return');

                    case 7:
                        context$2$0.next = 9;
                        return _regeneratorRuntime.awrap(this.findElOrEls('id', 'com.android.chrome:id/terms_accept', false));

                    case 9:
                        el = context$2$0.sent;
                        context$2$0.next = 12;
                        return _regeneratorRuntime.awrap(this.click(el.ELEMENT));

                    case 12:
                        context$2$0.prev = 12;
                        context$2$0.next = 15;
                        return _regeneratorRuntime.awrap(this.findElOrEls('id', 'com.android.chrome:id/negative_button', false));

                    case 15:
                        _el = context$2$0.sent;
                        context$2$0.next = 18;
                        return _regeneratorRuntime.awrap(this.click(_el.ELEMENT));

                    case 18:
                        context$2$0.next = 23;
                        break;

                    case 20:
                        context$2$0.prev = 20;
                        context$2$0.t0 = context$2$0['catch'](12);

                        // DO NOTHING, THIS DEVICE DIDNT LAUNCH THE SIGNIN DIALOG
                        // IT MUST BE A NON GMS DEVICE
                        _logger2['default'].warn('This device didnt show Chrome SignIn dialog, ' + context$2$0.t0.message);

                    case 23:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this, [[12, 20]]);
        }
    }, {
        key: 'initAutoWebview',
        value: function initAutoWebview() {
            return _regeneratorRuntime.async(function initAutoWebview$(context$2$0) {
                var _this3 = this;

                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        if (!this.opts.autoWebview) {
                            context$2$0.next = 3;
                            break;
                        }

                        context$2$0.next = 3;
                        return _regeneratorRuntime.awrap((function callee$2$0() {
                            var viewName, timeout;
                            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                                var _this2 = this;

                                while (1) switch (context$3$0.prev = context$3$0.next) {
                                    case 0:
                                        viewName = this.defaultWebviewName();
                                        timeout = this.opts.autoWebviewTimeout || 2000;

                                        _logger2['default'].info('Setting auto webview to context \'' + viewName + '\' with timeout ' + timeout + 'ms');

                                        // try every 500ms until timeout is over
                                        context$3$0.next = 5;
                                        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(timeout / 500, 500, function callee$3$0() {
                                            return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                                                while (1) switch (context$4$0.prev = context$4$0.next) {
                                                    case 0:
                                                        context$4$0.next = 2;
                                                        return _regeneratorRuntime.awrap(this.setContext(viewName));

                                                    case 2:
                                                    case 'end':
                                                        return context$4$0.stop();
                                                }
                                            }, null, _this2);
                                        }));

                                    case 5:
                                    case 'end':
                                        return context$3$0.stop();
                                }
                            }, null, _this3);
                        })());

                    case 3:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }, {
        key: 'initAUT',
        value: function initAUT() {
            var launchInfo;
            return _regeneratorRuntime.async(function initAUT$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        context$2$0.next = 2;
                        return _regeneratorRuntime.awrap(_androidHelpers2['default'].getLaunchInfo(this.adb, this.opts));

                    case 2:
                        launchInfo = context$2$0.sent;

                        _Object$assign(this.opts, launchInfo);
                        _Object$assign(this.caps, launchInfo);
                        // install app

                        if (this.opts.app) {
                            context$2$0.next = 14;
                            break;
                        }

                        if (this.opts.fullReset) {
                            _logger2['default'].errorAndThrow('Full reset requires an app capability, use fastReset if app is not provided');
                        }
                        _logger2['default'].debug('No app capability. Assuming it is already on the device');

                        if (!this.opts.fastReset) {
                            context$2$0.next = 11;
                            break;
                        }

                        context$2$0.next = 11;
                        return _regeneratorRuntime.awrap(_androidHelpers2['default'].resetApp(this.adb, this.opts.app, this.opts.appPackage, this.opts.fastReset));

                    case 11:
                        context$2$0.next = 13;
                        return _regeneratorRuntime.awrap(this.grantPermissions());

                    case 13:
                        return context$2$0.abrupt('return');

                    case 14:
                        if (this.opts.skipUninstall) {
                            context$2$0.next = 17;
                            break;
                        }

                        context$2$0.next = 17;
                        return _regeneratorRuntime.awrap(this.adb.uninstallApk(this.opts.appPackage));

                    case 17:
                        context$2$0.next = 19;
                        return _regeneratorRuntime.awrap(_androidHelpers2['default'].installApkRemotely(this.adb, this.opts));

                    case 19:
                        context$2$0.next = 21;
                        return _regeneratorRuntime.awrap(this.grantPermissions());

                    case 21:
                        context$2$0.next = 23;
                        return _regeneratorRuntime.awrap(_androidHelpers2['default'].pushStrings(this.opts.language, this.adb, this.opts));

                    case 23:
                        this.apkStrings[this.opts.language] = context$2$0.sent;

                    case 24:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }, {
        key: 'startChromeSession',
        value: function startChromeSession() {
            var opts, knownPackages;
            return _regeneratorRuntime.async(function startChromeSession$(context$2$0) {
                var _this4 = this;

                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        _logger2['default'].info("Starting a chrome-based browser session");
                        opts = _lodash2['default'].cloneDeep(this.opts);

                        opts.chromeUseRunningApp = false;

                        knownPackages = ["org.chromium.chrome.shell", "com.android.chrome", "com.chrome.beta", "org.chromium.chrome", "org.chromium.webview_shell"];

                        if (!_lodash2['default'].contains(knownPackages, this.opts.appPackage)) {
                            opts.chromeAndroidActivity = this.opts.appActivity;
                        }
                        context$2$0.next = 7;
                        return _regeneratorRuntime.awrap((0, _commandsContext.setupNewChromedriver)(opts, this.adb.curDeviceId, this.adb));

                    case 7:
                        this.chromedriver = context$2$0.sent;

                        this.chromedriver.on(_appiumChromedriver2['default'].EVENT_CHANGED, function (msg) {
                            if (msg.state === _appiumChromedriver2['default'].STATE_STOPPED) {
                                _this4.onChromedriverStop(_webviewHelpers.CHROMIUM_WIN);
                            }
                        });

                        // Now that we have a Chrome session, we ensure that the context is
                        // appropriately set and that this chromedriver is added to the list
                        // of session chromedrivers so we can switch back and forth
                        this.curContext = _webviewHelpers.CHROMIUM_WIN;
                        this.sessionChromedrivers[_webviewHelpers.CHROMIUM_WIN] = this.chromedriver;
                        this.proxyReqRes = this.chromedriver.proxyReq.bind(this.chromedriver);
                        this.jwpProxyActive = true;

                    case 13:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }, {
        key: 'checkAppPresent',
        value: function checkAppPresent() {
            return _regeneratorRuntime.async(function checkAppPresent$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        _logger2['default'].debug("Checking whether app is actually present");
                        context$2$0.next = 3;
                        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.opts.app));

                    case 3:
                        if (context$2$0.sent) {
                            context$2$0.next = 5;
                            break;
                        }

                        _logger2['default'].errorAndThrow('Could not find app apk at ' + this.opts.app);

                    case 5:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }, {
        key: 'checkPackagePresent',
        value: function checkPackagePresent() {
            return _regeneratorRuntime.async(function checkPackagePresent$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        _logger2['default'].debug("Checking whether package is present on the device");
                        context$2$0.next = 3;
                        return _regeneratorRuntime.awrap(this.adb.shell(['pm', 'list', 'packages', this.opts.appPackage]));

                    case 3:
                        if (context$2$0.sent) {
                            context$2$0.next = 5;
                            break;
                        }

                        _logger2['default'].errorAndThrow('Could not find package ' + this.opts.appPackage + ' on the device');

                    case 5:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }, {
        key: 'grantPermissions',
        value: function grantPermissions() {
            return _regeneratorRuntime.async(function grantPermissions$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        if (!this.opts.autoGrantPermissions) {
                            context$2$0.next = 9;
                            break;
                        }

                        context$2$0.prev = 1;
                        context$2$0.next = 4;
                        return _regeneratorRuntime.awrap(this.adb.grantAllPermissions(this.opts.appPackage, this.opts.app));

                    case 4:
                        context$2$0.next = 9;
                        break;

                    case 6:
                        context$2$0.prev = 6;
                        context$2$0.t0 = context$2$0['catch'](1);

                        _logger2['default'].error('Unable to grant permissions requested. Original error: ' + context$2$0.t0.message);

                    case 9:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this, [[1, 6]]);
        }

        // Set CompressedLayoutHierarchy on the device
    }, {
        key: 'setCompressedLayoutHierarchy',
        value: function setCompressedLayoutHierarchy(compress) {
            return _regeneratorRuntime.async(function setCompressedLayoutHierarchy$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        context$2$0.next = 2;
                        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("compressedLayoutHierarchy", { compressLayout: compress }));

                    case 2:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }, {
        key: 'deleteSession',
        value: function deleteSession() {
            var avdName;
            return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        _logger2['default'].debug("Shutting down Android driver");
                        context$2$0.next = 3;
                        return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(AndroidDriver.prototype), 'deleteSession', this).call(this));

                    case 3:
                        if (!this.bootstrap) {
                            context$2$0.next = 26;
                            break;
                        }

                        context$2$0.next = 6;
                        return _regeneratorRuntime.awrap(this.stopChromedriverProxies());

                    case 6:
                        if (!(this.opts.unicodeKeyboard && this.opts.resetKeyboard && this.defaultIME)) {
                            context$2$0.next = 10;
                            break;
                        }

                        _logger2['default'].debug('Resetting IME to ' + this.defaultIME);
                        context$2$0.next = 10;
                        return _regeneratorRuntime.awrap(this.adb.setIME(this.defaultIME));

                    case 10:
                        context$2$0.next = 12;
                        return _regeneratorRuntime.awrap(this.bootstrap.shutdown());

                    case 12:
                        this.bootstrap = null;

                        if (this.isChromeSession) {
                            context$2$0.next = 19;
                            break;
                        }

                        context$2$0.next = 16;
                        return _regeneratorRuntime.awrap(this.testbundle.shutdown());

                    case 16:
                        this.testbundle = null;
                        context$2$0.next = 19;
                        return _regeneratorRuntime.awrap(this.adb.forceStop(this.opts.appPackage));

                    case 19:
                        context$2$0.next = 21;
                        return _regeneratorRuntime.awrap(this.adb.goToHome());

                    case 21:
                        if (!(this.opts.fullReset && !this.opts.skipUninstall && !this.appOnDevice)) {
                            context$2$0.next = 24;
                            break;
                        }

                        context$2$0.next = 24;
                        return _regeneratorRuntime.awrap(this.adb.uninstallApk(this.opts.appPackage));

                    case 24:
                        context$2$0.next = 27;
                        break;

                    case 26:
                        _logger2['default'].debug("Called deleteSession but bootstrap wasn't active");

                    case 27:
                        if (!this.opts.startLogcat) {
                            context$2$0.next = 30;
                            break;
                        }

                        context$2$0.next = 30;
                        return _regeneratorRuntime.awrap(this.adb.stopLogcat());

                    case 30:
                        if (!this.useUnlockHelperApp) {
                            context$2$0.next = 33;
                            break;
                        }

                        context$2$0.next = 33;
                        return _regeneratorRuntime.awrap(this.adb.forceStop('io.appium.unlock'));

                    case 33:
                        if (!this.opts.reboot) {
                            context$2$0.next = 38;
                            break;
                        }

                        avdName = this.opts.avd.replace('@', '');

                        _logger2['default'].debug('closing emulator \'' + avdName + '\'');
                        context$2$0.next = 38;
                        return _regeneratorRuntime.awrap(this.adb.killEmulator(avdName));

                    case 38:
                        if (!this.opts.clearSystemFiles) {
                            context$2$0.next = 54;
                            break;
                        }

                        if (!this.opts.appIsTemp) {
                            context$2$0.next = 51;
                            break;
                        }

                        _logger2['default'].debug('Temporary copy of app was made: deleting \'' + this.opts.app + '\'');
                        context$2$0.prev = 41;
                        context$2$0.next = 44;
                        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(this.opts.app));

                    case 44:
                        context$2$0.next = 49;
                        break;

                    case 46:
                        context$2$0.prev = 46;
                        context$2$0.t0 = context$2$0['catch'](41);

                        _logger2['default'].warn('Unable to delete temporary app: ' + context$2$0.t0.message);

                    case 49:
                        context$2$0.next = 52;
                        break;

                    case 51:
                        _logger2['default'].debug('App was not copied, so not deleting');

                    case 52:
                        context$2$0.next = 55;
                        break;

                    case 54:
                        _logger2['default'].debug('Not cleaning generated files. Add `clearSystemFiles` capability if wanted.');

                    case 55:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this, [[41, 46]]);
        }
    }, {
        key: 'validateDesiredCaps',
        value: function validateDesiredCaps(caps) {
            // check with the base class, and return if it fails
            var res = _get(Object.getPrototypeOf(AndroidDriver.prototype), 'validateDesiredCaps', this).call(this, caps);
            if (!res) return res; // eslint-disable-line curly

            // make sure that the capabilities have one of `app`, `appPackage` or `browser`
            if ((!caps.browserName || !_androidHelpers2['default'].isChromeBrowser(caps.browserName)) && !caps.app && !caps.appPackage) {
                var msg = 'The desired capabilities must include either an app, appPackage or browserName';
                _logger2['default'].errorAndThrow(msg);
            }
            // warn if the capabilities have both `app` and `browser, although this
            // is common with selenium grid
            if (caps.browserName && caps.app) {
                var msg = 'The desired capabilities should generally not include both an app and a browserName';
                _logger2['default'].warn(msg);
            }
        }
    }, {
        key: 'proxyActive',
        value: function proxyActive(sessionId) {
            _get(Object.getPrototypeOf(AndroidDriver.prototype), 'proxyActive', this).call(this, sessionId);

            return this.jwpProxyActive;
        }
    }, {
        key: 'getProxyAvoidList',
        value: function getProxyAvoidList(sessionId) {
            _get(Object.getPrototypeOf(AndroidDriver.prototype), 'getProxyAvoidList', this).call(this, sessionId);

            return this.jwpProxyAvoid;
        }
    }, {
        key: 'canProxy',
        value: function canProxy(sessionId) {
            _get(Object.getPrototypeOf(AndroidDriver.prototype), 'canProxy', this).call(this, sessionId);

            // this will change depending on ChromeDriver status
            return _lodash2['default'].isFunction(this.proxyReqRes);
        }
    }, {
        key: 'appOnDevice',
        get: function get() {
            return this.helpers.isPackageOrBundle(this.opts.app) || !this.opts.app && this.helpers.isPackageOrBundle(this.opts.appPackage);
        }
    }, {
        key: 'isChromeSession',
        get: function get() {
            return _androidHelpers2['default'].isChromeBrowser(this.opts.browserName);
        }
    }]);

    return AndroidDriver;
})(_appiumBaseDriver.BaseDriver);

exports['default'] = AndroidDriver;
module.exports = exports['default'];

// the whole createSession flow is surrounded in a try-catch statement
// if creating a session fails at any point, we teardown everything we
// set up before throwing the error.

// find and copy, or download and unzip an app url or path

// Some cloud services using appium launch the avd themselves, so we ensure netspeed
// is set for emulators by calling adb.networkSpeed before running the app

// check if we have to enable/disable gps before running the application

// ignoring delete session exception if any and throw the real error
// that happened while creating the session.

// If the user sets autoLaunch to false, they are responsible for initAUT() and startAUT()

// set up app under test
// eslint-disable-line promise/prefer-await-to-callbacks

// Set CompressedLayoutHierarchy on the device based on current settings object
// this has to happen _after_ bootstrap is initialized

// start a chromedriver session and proxy to it

// dismiss Chrome welcome dialog

// start app

// populate appPackage, appActivity, appWaitPackage, appWaitActivity,
// and the device being used
// in the opts and caps (so it gets back to the user on session creation)

// certain cleanup we only care to do if the bootstrap was ever run

// 要先关闭bootstrap

// testbundle关掉后，应用也会关闭

// some cleanup we want to do regardless, in case we are shutting down
// mid-startup
//# sourceMappingURL=data:application/json;charset=utf8;base64,
