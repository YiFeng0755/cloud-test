"use strict";
var babel = require('gulp-babel'),
    replace = require('gulp-replace'),
    rename = require('gulp-rename'),
    _ = require('lodash'),
    streamCombiner = require('./stream-combiner'),
    sourcemaps = require('gulp-sourcemaps'),
    path = require('path');

var BABEL_OPTS = {
  blacklist: ['react'],
  optional: ['runtime'],
  modules: 'common',
  stage: 1,
  sourceMaps: true
};

var SOURCEMAP_OPTS = {
  sourceRoot: function sourceRoot(file) {
    // eslint-disable-line object-shorthand
    // Point to source root relative to the transpiled file
    return path.relative(path.join(file.cwd, file.path), file.base);
  }
};

var HEADER = 'require(\'source-map-support\').install();\n\n';

var renameEsX = function renameEsX() {
  return rename(function (path) {
    path.basename = path.basename.replace(/\.es[67]$/, '');
  });
};

module.exports = function (opts) {
  opts = opts || {};
  this.babelOpts = _.merge({}, BABEL_OPTS, opts.babelOpts);
  this.sourceMapOpts = _.merge({}, SOURCEMAP_OPTS, opts.sourceMapOpts);

  if (opts.flow) {
    this.babelOpts.blacklist.push('flow');
  }
  this.header = HEADER;
  this.stream = (function () {
    return streamCombiner((function (source) {
      return source.pipe(sourcemaps.init()).pipe(babel(this.babelOpts)).pipe(replace(/\/\/\s+transpile:(main|mocha)\s*/g, this.header)).pipe(renameEsX()).pipe(sourcemaps.write(this.sourceMapOpts));
    }).bind(this));
  }).bind(this);
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,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XCI7XG5sZXQgYmFiZWwgPSByZXF1aXJlKCdndWxwLWJhYmVsJyksXG4gICAgcmVwbGFjZSA9IHJlcXVpcmUoJ2d1bHAtcmVwbGFjZScpLFxuICAgIHJlbmFtZSA9IHJlcXVpcmUoJ2d1bHAtcmVuYW1lJyksXG4gICAgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpLFxuICAgIHN0cmVhbUNvbWJpbmVyID0gcmVxdWlyZSgnLi9zdHJlYW0tY29tYmluZXInKSxcbiAgICBzb3VyY2VtYXBzID0gcmVxdWlyZSgnZ3VscC1zb3VyY2VtYXBzJyksXG4gICAgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxubGV0IEJBQkVMX09QVFMgPSB7XG4gIGJsYWNrbGlzdDogWydyZWFjdCddLFxuICBvcHRpb25hbDogWydydW50aW1lJ10sXG4gIG1vZHVsZXM6ICdjb21tb24nLFxuICBzdGFnZTogMSxcbiAgc291cmNlTWFwczogdHJ1ZSxcbn07XG5cbmxldCBTT1VSQ0VNQVBfT1BUUyA9IHtcbiAgc291cmNlUm9vdDogZnVuY3Rpb24gKGZpbGUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBvYmplY3Qtc2hvcnRoYW5kXG4gICAgLy8gUG9pbnQgdG8gc291cmNlIHJvb3QgcmVsYXRpdmUgdG8gdGhlIHRyYW5zcGlsZWQgZmlsZVxuICAgIHJldHVybiBwYXRoLnJlbGF0aXZlKHBhdGguam9pbihmaWxlLmN3ZCwgZmlsZS5wYXRoKSwgZmlsZS5iYXNlKTtcbiAgfSxcbn07XG5cbmxldCBIRUFERVIgPSAncmVxdWlyZShcXCdzb3VyY2UtbWFwLXN1cHBvcnRcXCcpLmluc3RhbGwoKTtcXG5cXG4nO1xuXG5sZXQgcmVuYW1lRXNYID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcmVuYW1lKGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgcGF0aC5iYXNlbmFtZSA9IHBhdGguYmFzZW5hbWUucmVwbGFjZSgvXFwuZXNbNjddJC8sICcnKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICB0aGlzLmJhYmVsT3B0cyA9IF8ubWVyZ2Uoe30sIEJBQkVMX09QVFMsIG9wdHMuYmFiZWxPcHRzKTtcbiAgdGhpcy5zb3VyY2VNYXBPcHRzID0gXy5tZXJnZSh7fSwgU09VUkNFTUFQX09QVFMsIG9wdHMuc291cmNlTWFwT3B0cyk7XG5cbiAgaWYgKG9wdHMuZmxvdykge1xuICAgIHRoaXMuYmFiZWxPcHRzLmJsYWNrbGlzdC5wdXNoKCdmbG93Jyk7XG4gIH1cbiAgdGhpcy5oZWFkZXIgPSBIRUFERVI7XG4gIHRoaXMuc3RyZWFtID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzdHJlYW1Db21iaW5lcihmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gc291cmNlXG4gICAgICAgIC5waXBlKHNvdXJjZW1hcHMuaW5pdCgpKVxuICAgICAgICAgIC5waXBlKGJhYmVsKHRoaXMuYmFiZWxPcHRzKSlcbiAgICAgICAgICAucGlwZShyZXBsYWNlKC9cXC9cXC9cXHMrdHJhbnNwaWxlOihtYWlufG1vY2hhKVxccyovZywgdGhpcy5oZWFkZXIpKVxuICAgICAgICAgIC5waXBlKHJlbmFtZUVzWCgpKVxuICAgICAgICAucGlwZShzb3VyY2VtYXBzLndyaXRlKHRoaXMuc291cmNlTWFwT3B0cykpO1xuICAgIH0uYmluZCh0aGlzKSk7XG4gIH0uYmluZCh0aGlzKTtcbn07XG4iXSwic291cmNlUm9vdCI6Ii4uXFwuLiJ9
