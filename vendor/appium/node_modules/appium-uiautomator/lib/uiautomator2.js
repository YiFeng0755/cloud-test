import events from 'events';
import { logger } from 'appium-support';


const log = logger.getLogger('TestBundle_Process');


const startDetector = (s) => { return /com\.boyaa\.application\.testbundle\.TestBundle/.test(s); };

class UiAutomator_Test extends events.EventEmitter {
    constructor (adb) {
        if (!adb) {
            log.errorAndThrow("adb is required to instantiate UiAutomator");
        }
        super();
        this.adb = adb;

    }

    // AppiumBootstrap.jar
    // io.appium.android.bootstrap.Bootstrap
    async start () {
        let processIsAlive;
        try {
            log.debug("Starting UiAutomator_Test");
            this.changeState(UiAutomator_Test.STATE_STARTING);

            // killing any uiautomator existing processes
            await this.killUiAutomator2OnDevice();

            log.debug('Starting UiAutomator_Test');
            let args = ['shell', 'am', 'instrument', '-w', '-e', 'class', 'com.boyaa.application.testbundle.TestBundle#test_RunServer',
                'com.boyaa.application.testbundle/android.test.InstrumentationTestRunner']

            // 只是初始化，只有调用start的时候，才会spawn
            this.proc = this.adb.createSubProcess(args);

            // handle out-of-bound exit by simply emitting a stopped state
            this.proc.on('exit', (code, signal) => {
                processIsAlive = false;
                // cleanup
                if (this.state !== UiAutomator_Test.STATE_STOPPED &&
                    this.state !== UiAutomator_Test.STATE_STOPPING) {
                    let msg = `testbundle process exited unexpectedly with code ${code}, ` +
                        `signal ${signal}`;
                    log.error(msg);
                } else if (this.state === UiAutomator_Test.STATE_STOPPING) {
                    log.debug("UiAutomator_Test shut down normally");
                }
                this.changeState(UiAutomator_Test.STATE_STOPPED);
            });

            await this.proc.start(startDetector);
            processIsAlive = true;
            this.changeState(UiAutomator_Test.STATE_ONLINE);
            return this.proc;
        } catch (e) {
            this.emit(UiAutomator_Test.EVENT_ERROR, e);
            if (processIsAlive) {
                await this.killUiAutomator2OnDevice();
                await this.proc.stop();
            }
            log.errorAndThrow(e);
        }
    }

    async shutdown () {
        log.debug('Shutting down UiAutomator_Test');
        this.changeState(UiAutomator_Test.STATE_STOPPING);
        try {
            await this.proc.stop();
        } catch (err) {
        }
        this.changeState(UiAutomator_Test.STATE_STOPPED);
    }


    changeState (state) {
        log.debug(`Moving to state '${state}'`);
        this.state = state;
        this.emit(UiAutomator_Test.EVENT_CHANGED, {state});
    }

    async killUiAutomator2OnDevice () {
        try {
            await this.adb.killProcessesByName('enginedlqp');
        } catch (e) {
            log.warn(`Error while killing uiAutomator: ${e}`);
        }
    }

}

UiAutomator_Test.EVENT_ERROR = 'uiautomator_error';
UiAutomator_Test.EVENT_CHANGED = 'stateChanged';
UiAutomator_Test.STATE_STOPPED = 'stopped';
UiAutomator_Test.STATE_STARTING = 'starting';
UiAutomator_Test.STATE_ONLINE = 'online';
UiAutomator_Test.STATE_STOPPING = 'stopping';

export default UiAutomator_Test;
