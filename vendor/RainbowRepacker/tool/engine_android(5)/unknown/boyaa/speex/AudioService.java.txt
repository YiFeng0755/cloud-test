package boyaa.speex;

import java.util.concurrent.TimeUnit;

import h264.com.H264Android;

import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioRecord;
import android.media.AudioTrack;
import android.media.MediaRecorder;
import android.os.SystemClock;

import com.boyaa.videodemo.MainActivity;
import com.boyaa.videodemo.bean.AudioBean;
import com.boyaa.videodemo.bean.VedioBean;
import com.boyaa.videodemo.utils.ApiUtils;
import com.boyaa.videodemo.utils.Constants;
import com.boyaa.videodemo.utils.LogUtils;
import com.boyaa.videodemo.videobuffer.RecvVedioManager;
import com.boyaa.videodemo.videobuffer.VideoBuffer;

public class AudioService {

	private boolean isStartAudioService = false;
	private Thread mAudioServiceThread;
	private Thread mAudioPlayThread;
	protected int mSampleRate = 8000;	
	protected AudioRecord m_in_rec;	
	protected AudioTrack m_out_trk;
	private SpeexUtils mSpeex;
	public AudioService(){
		
		isStartAudioService = true;

		if(VideoBuffer.getInstance()!=null && VideoBuffer.getInstance().getVedioBufferSize() >0)
		{
			VideoBuffer.getInstance().Clean();
		}
		
		int iRet = Speex.echoinit(160, 5000);
		
		if(iRet != 1)
		{
			release();
			return;
		}
		
		mAudioServiceThread = new Thread(new AudioServiceThread());
		mAudioServiceThread.setName("mAudioServiceThread");
		mAudioServiceThread.start();
		
		/*mAudioPlayThread = new Thread(new AudioPlayThread());
		mAudioPlayThread.setName("AudioPlayThread");
		mAudioPlayThread.start();*/
		
		
		mSpeex = new SpeexUtils(1);
		mSpeex.init();
	}
	
	class AudioServiceThread implements Runnable {

		@Override
		public void run() {
			
			try{
				byte[] processedDataExt = new byte[160];
				short[] nullData = new short[160];
				short[] processedData = new short[160];
				short[] Audio_in = new short[160];
				short[] Audio_out = new short[160];
				int m_in_buf_size = AudioRecord.getMinBufferSize(mSampleRate,AudioFormat.CHANNEL_CONFIGURATION_MONO, AudioFormat.ENCODING_PCM_16BIT);
				m_in_rec = new AudioRecord(MediaRecorder.AudioSource.MIC, mSampleRate, AudioFormat.CHANNEL_CONFIGURATION_MONO,
						AudioFormat.ENCODING_PCM_16BIT,m_in_buf_size*10);
				m_in_rec.startRecording();
				
				int m_out_buf_size = AudioTrack.getMinBufferSize(mSampleRate,AudioFormat.CHANNEL_CONFIGURATION_MONO,AudioFormat.ENCODING_PCM_16BIT);
				m_out_trk = new AudioTrack(AudioManager.STREAM_MUSIC, mSampleRate, AudioFormat.CHANNEL_CONFIGURATION_MONO,
						AudioFormat.ENCODING_PCM_16BIT,m_out_buf_size*10,AudioTrack.MODE_STREAM);

		    	m_out_trk.play();
				
				while(isStartAudioService){
					
					if(VoiceManager.mRecvBuffer!=null && VoiceManager.mRecvBuffer.size() > 2)
		 			{	AudioBean bean = null;		
		 				bean = VoiceManager.mRecvBuffer.poll(1, TimeUnit.MILLISECONDS);
		 				
		 				if( bean!=null){
		 					int getSize = mSpeex.decode(bean.m_buffer, processedData, bean.m_buffer.length);
		 					//mAudioDecoder.putData(System.currentTimeMillis(),bean.m_buffer,0,bean.m_buffer.length);
		 					LogUtils.d("AudioDecode", " decode len =" + bean.m_buffer.length +" decoded len="+getSize);
		 					if(getSize<= 0)
		 					{
		 						continue;
		 					}
		 					
		 					m_out_trk.write(processedData, 0, processedData.length);
		 					
		 					Speex.echoplayback(processedData);
		 				}
		 				else
							Speex.echoplayback(nullData);
		 			}
					else
						Speex.echoplayback(nullData);
					
					int len  = m_in_rec.read(Audio_in, 0, 160);
					if( len<=0)
						continue;
					int iValue = Speex.echocapture(Audio_in, Audio_out);
					if(iValue == 0)
					{
						LogUtils.d("AudioDecode","invalid voice");
						continue;
					}
					
					int getSize = mSpeex.encode(Audio_out, 0, processedDataExt, 0);
					if(getSize>0)
					{
						byte tempdata[] =new byte[getSize+0];
						System.arraycopy(processedDataExt, 0, tempdata, 0, getSize);
						
						AudioBean bean = new AudioBean();
						bean.m_buffer = tempdata;

						VoiceManager.mRecvBuffer.put(bean);
						//ApiUtils.SendAudioData(tempdata,0);
					}
					else
						continue;
					
				}

			}catch(Exception e){
				e.printStackTrace();
			}finally{
				
			}
		}
	}
	

	/**
	 * 释放与系统绑定的任何资源
	 */
	public void release(){
		m_out_trk.stop();
		isStartAudioService = false;
		Speex.echoclose();
	}
}
