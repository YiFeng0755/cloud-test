{
  "_args": [
    [
      {
        "raw": "node-ssh@4.2.3",
        "scope": null,
        "escapedName": "node-ssh",
        "name": "node-ssh",
        "rawSpec": "4.2.3",
        "spec": "4.2.3",
        "type": "version"
      },
      "/var/stf"
    ]
  ],
  "_from": "node-ssh@4.2.3",
  "_id": "node-ssh@4.2.3",
  "_inCache": true,
  "_location": "/node-ssh",
  "_nodeVersion": "8.1.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/node-ssh-4.2.3.tgz_1500439580245_0.15741396811790764"
  },
  "_npmUser": {
    "name": "steelbrain",
    "email": "i@steelbrain.me"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {
    "asn1": "0.2.3",
    "semver": "5.4.1",
    "streamsearch": "0.1.2"
  },
  "_requested": {
    "raw": "node-ssh@4.2.3",
    "scope": null,
    "escapedName": "node-ssh",
    "name": "node-ssh",
    "rawSpec": "4.2.3",
    "spec": "4.2.3",
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-ssh/-/node-ssh-4.2.3.tgz",
  "_shasum": "93f1bb1a6721015d8a2d32980eb2e85c1614825b",
  "_shrinkwrap": null,
  "_spec": "node-ssh@4.2.3",
  "_where": "/var/stf",
  "author": {
    "name": "steelbrain",
    "email": "i@steelbrain.me"
  },
  "bugs": {
    "url": "https://github.com/steelbrain/node-ssh/issues"
  },
  "dependencies": {
    "sb-promisify": "^2.0.1",
    "sb-scandir": "^1.0.0",
    "shell-escape": "^0.2.0",
    "ssh2": "^0.5.0"
  },
  "description": "SS2 with Promises",
  "devDependencies": {
    "babel-cli": "^6.11.4",
    "babel-preset-steelbrain": "^5.0.0",
    "eslint-config-steelbrain": "^3.0.1",
    "flow-bin": "^0.46.0",
    "jasmine-fix": "^1.0.1",
    "pty.js": "^0.3.1",
    "ssh2-streams": "^0.1.6"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-rg9rJyIqGEjH/OPIkEoqwAK4K+rAh3CHogBBuWwfnSHBPGQ2b8LQNPgNa+8LkV4DDHhsfDNyUhfZq+XpN1FYow==",
    "shasum": "93f1bb1a6721015d8a2d32980eb2e85c1614825b",
    "tarball": "https://registry.npmjs.org/node-ssh/-/node-ssh-4.2.3.tgz"
  },
  "gitHead": "3b7d38bbb2b45d3ac54d715c739da62b8dd1428f",
  "homepage": "https://github.com/steelbrain/node-ssh#readme",
  "keywords": [
    "ssh",
    "ssh2",
    "sftp"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "steelbrain",
      "email": "i@steelbrain.me"
    }
  ],
  "name": "node-ssh",
  "optionalDependencies": {},
  "readme": "Node-SSH - SSH2 with Promises\n=========\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/steelbrain/node-ssh.svg)](https://greenkeeper.io/)\n\nNode-SSH is an extremely lightweight Promise wrapper for [ssh2][ssh2], Period.\n\n#### Example\n\n```js\nvar path, node_ssh, ssh, fs\n\nfs = require('fs')\npath = require('path')\nnode_ssh = require('node-ssh')\nssh = new node_ssh()\n\nssh.connect({\n  host: 'localhost',\n  username: 'steel',\n  privateKey: '/home/steel/.ssh/id_rsa'\n})\n/*\n Or\n ssh.connect({\n   host: 'localhost',\n   username: 'steel',\n   privateKey: fs.readFileSync('/home/steel/.ssh/id_rsa')\n })\n if you want to use the raw string as private key\n */\n.then(function() {\n  // Local, Remote\n  ssh.putFile('/home/steel/Lab/localPath', '/home/steel/Lab/remotePath').then(function() {\n    console.log(\"The File thing is done\")\n  }, function(error) {\n    console.log(\"Something's wrong\")\n    console.log(error)\n  })\n  // Array<Shape('local' => string, 'remote' => string)>\n  ssh.putFiles([{ local: '/home/steel/Lab/localPath', remote: '/home/steel/Lab/remotePath' }]).then(function() {\n    console.log(\"The File thing is done\")\n  }, function(error) {\n    console.log(\"Something's wrong\")\n    console.log(error)\n  })\n  // Local, Remote\n  ssh.getFile('/home/steel/Lab/localPath', '/home/steel/Lab/remotePath').then(function(Contents) {\n    console.log(\"The File's contents were successfully downloaded\")\n  }, function(error) {\n    console.log(\"Something's wrong\")\n    console.log(error)\n  })\n  // Putting entire directories\n  const failed = []\n  const successful = []\n  ssh.putDirectory('/home/steel/Lab', '/home/steel/Lab', {\n    recursive: true,\n    validate: function(itemPath) {\n      const baseName = path.basename(itemPath)\n      return baseName.substr(0, 1) !== '.' && // do not allow dot files\n             baseName !== 'node_modules' // do not allow node_modules\n    },\n    tick: function(localPath, remotePath, error) {\n      if (error) {\n        failed.push(localPath)\n      } else {\n        successful.push(localPath)\n      }\n    }\n  }).then(function(status) {\n    console.log('the directory transfer was', status ? 'successful' : 'unsuccessful')\n    console.log('failed transfers', failed.join(', '))\n    console.log('successful transfers', successful.join(', '))\n  })\n  // Command\n  ssh.execCommand('hh_client --json', { cwd:'/var/www' }).then(function(result) {\n    console.log('STDOUT: ' + result.stdout)\n    console.log('STDERR: ' + result.stderr)\n  })\n  // Command with escaped params\n  ssh.exec('hh_client', ['--json'], { cwd: '/var/www', stream: 'stdout', options: { pty: true } }).then(function(result) {\n    console.log('STDOUT: ' + result)\n  })\n})\n```\n\n#### API\n\n```js\nclass SSH{\n  connect(config: SSH2Config): Promise<this>\n  requestSFTP(): Promise<SSH2SFTP>\n  requestShell(): Promise<SSH2Shell>\n  mkdir(path: string, method: 'sftp' | 'exec' = 'sftp', givenSftp?: Object): Promise<string>\n  exec(command: string, parameters: Array<string>, options: { cwd?: string, options?: Object, stdin?: string, stream?: 'stdout' | 'stderr', 'both' } = {}): Promise<Object | string>\n  execCommand(command: string, options: { cwd: string, stdin: string } = {}): Promise<{ stdout: string, options?: Object, stderr: string, signal: ?string, code: number }>\n  putFile(localFile: string, remoteFile: string, sftp: ?Object = null, opts: ?Object = null): Promise<void>\n  getFile(localFile: string, remoteFile: string, sftp: ?Object = null, opts: ?Object = null): Promise<void>\n  putFiles(files: Array<{ local: string, remote: string }>, sftp: ?Object = null, maxAtOnce: number = 5, opts: ?Object = null): Promise<void>\n  putDirectory(localDirectory: string, remoteDirectory: string, options: ?{ recursive: boolean, tick(localPath, remotePath, error): any, validate(localPath): boolean } = null, sftp: ?Object = null, opts: ?Object = null): Promise<boolean>\n  dispose(): void\n}\n```\n\n### License\nThis project is licensed under the terms of MIT license. See the LICENSE file for more info.\n\n[ssh2]:https://github.com/mscdex/ssh2\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/steelbrain/node-ssh.git"
  },
  "scripts": {
    "build": "npm run clean; babel src --out-dir lib",
    "clean": "rm -rf lib",
    "test": "(apm test) && (flow check) && (eslint . )",
    "watch": "npm run clean; babel src --out-dir lib --watch"
  },
  "version": "4.2.3"
}
