/**
 * Created by GuixiangGui on 2016/12/9.
 */

var dbapi = require('../db/api')
var Promise = require('bluebird')
var fs = require('fs')
var adbkit = require('adbkit')
var exec = require('child_process').exec
var execSync = require('child_process').execSync
var promiseutil = require('./promiseutil')
var logger = require('./logger')
var testutil = module.exports = Object.create(null)

testutil.getreqdeviceserials = function (req, dbapi) {
  var widths = []
  var heights = []
  var os_versions = []
  var manufacturers = []

  if(req.body.dpis.length>0){
    req.body.dpis.forEach(function (dpi) {
      widths.push(parseInt(dpi.split('*')[0]))
      heights.push(parseInt(dpi.split('*')[1]))
    })
  }
  if(req.body.os_versions.length>0){
    req.body.os_versions.forEach((function (os_version) {
      os_versions.push(os_version)
    }))
  }
  if(req.body.manufacturers.length>0){
    req.body.manufacturers.forEach(function (manufacturer) {
      manufacturers.push(manufacturer)
    })
  }

  return new Promise(function (resolve, reject) {
    dbapi.searchPhoneSerial(manufacturers,os_versions,widths,heights)
      .then(function (cursor) {
        return Promise.promisify(cursor.toArray, cursor)()
          .then(function (list) {
            resolve(list)
          })
      })
  })
}

testutil.createadb = function (options, serial, log) {
  return new Promise(function(resolve, reject) {
  var adb = adbkit.createClient({
    host: options.host
    //host: '172.20.104.10'
    , port: '5037'
  })
  adb.Keycode = adbkit.Keycode  
    resolve(adb)
  })
}

testutil.init = function (taskid, serial, adb, options) {
  var log = logger.createLogger('testinit:' + taskid + ':' + serial)
  return new Promise(function (resolve, reject) {
    testutil.befortest(serial, adb, log)
      .then(function () {
        log.debug('kill monkey process')
        return testutil.killAndroidProceBypkg(adb, serial, 'com.android.commands.monkey', log)
      })
      .then(function () {
        log.debug('kill monitor process')
        return testutil.killAndroidProceBypkg(adb, serial, 'app_process', log)
      })
      .then(function () {
        for(var file in options.logs){
          log.debug('rm ' + options.logs[file])
          fs.stat(options.logs[file], function (err, stats) {
            if(stats&&stats.isFile()){
              exec('rm ' + options.logs[file])
            }else if(stats&&stats.isDirectory()){
              exec('rm *', {cwd: options.logs[file]})
            }
          })
        }
        /*log.debug('rm monkeyLog')
        exec('rm ' + options.monkeyLog)
        log.debug('rm logcatLog')
        exec('rm ' + options.logcatLog)
        log.debug('rm anrLog')
        exec('rm ' + options.anrLog)
        log.debug('rm cptScreencap')
        exec('rm ' + options.cptScreencapPath + serial + '*')*/
      })
      .then(function () {
        log.debug('uninstall pkg: ', options.pkg)
        // var uninstallPkgCmd = 'adb -s ' + serial + ' uninstall ' + option.pkg
        // return execSync(uninstallPkgCmd)

        log.info('分布式相关修改')
       return adb.uninstall(serial,options.pkg)
                 // .timeout(1000*60*2)
                 // .catch(function(err){
                 //   log.info('testutil.init unistall pkg err'.err)
                 // })
        // adb.uninstall(serial, options.pkg)
      })
      .then(function () {
        return testutil.wait(1000*20)
      })
      .catch(function (err) {
        log.error(err, err.stack)
      })
      .finally(function () {
        log.debug('init finish')
        resolve('')
      })
  })
}

testutil.befortest = function (serial, adb, log) {
  return installPerformanceAndUnlockAPK(serial, adb, log)
    .then(function () {
      return pushUiautomator(serial, adb)
    })
    .then(function () {
      var startuiautomatorCmd = 'uiautomator runtest autoinstall.jar -c com.boyaa.stf.uiautomator.AutoInstall'
      log.debug('start uiautomator')
      return adb.shell(serial, startuiautomatorCmd)
    })
    .then(function () {
      return testutil.wakeUpPhone(serial, adb, log)
    })
}

testutil.wait = function (times) {
  return new Promise(function (resolve, reject) {
    setTimeout(function () {
      resolve('')
    }, times)
  })
}

testutil.wakeUpPhone = function(serial, adb, log){
  return adb.shell(serial, 'pm clear com.example.unlock')
    .then(adbkit.util.readAll)
    .then(function (output) {
      log.debug('pm clear com.example.unlock ', output.toString())
      var wakeUpCMD = 'am start -n com.example.unlock/.Unlock'
      log.debug('wake up the phone start')
      return adb.shell(serial,wakeUpCMD)
    })
    .then(function () {
      return testutil.wait(2000)
    })
}

testutil.sendKeyEvent = function (serial, adb, keyEvent, log) {
  return adb.shell(serial, 'input keyevent ' + keyEvent)
    .then(adbkit.util.readAll)
    .then(function (output) {
      log.debug('input keyevent ' + keyEvent)
    })
}

testutil.installApkN = function (serial, apkPath, adb, log) {
  return new Promise(function (resolve, reject) {
    adb.install(serial, apkPath)
      .timeout(1000*60*5)
      .then(function () {
        resolve('')
      })
      .catch(function (err) {
        switch (err.code){
          case 'INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES':
          case 'INSTALL_FAILED_UID_CHANGED':
          case 'INSTALL_FAILED_VERSION_DOWNGRADE':
            log.info(
              'Uninstalling "%s" first due to inconsistent certificates'
              , pkg
            )
            return adb.uninstall(serial, pkg)
              .timeout(60000 * 5)
              .then(function() {
                return adb.install(serial, apkPath)
                  .timeout(60000 * 5)
                  .catch(function (err) {
                    if(err.code){
                      rpldata.result = {errorType : 'install failed', reson : err.code}
                    }else{
                      rpldata.result = {errorType : 'install failed', reson : 'unknown'}
                    }

                    reject(err)
                  })
              })
            break
          default:

            reject(err)
        }
      })
  })
}

testutil.installApk = function (serial, apkPath, adb, log, waitTime) {
  return adb.install(serial, apkPath)
    .timeout(60000 * 5)
    .then(function () {
      var installWaitTime = 1000*5
      if(waitTime){
        installWaitTime = waitTime
      }
      return testutil.wait(installWaitTime)
    })
    .catch(function (err) {
      log.error('apk install failed. ', err.code)
    })
}

testutil.killAndroidProceBypkg = function (adb, serial, pkg, log) {
  log.debug('start kill pkg : ', pkg)
  var pkgRegExp = new RegExp(pkg)
  return adb.shell(serial, 'ps')
    .then(adbkit.util.readAll)
    .then(function (output) {
      var outputStr = output.toString().trim()
      if(pkgRegExp.test(outputStr)){
        var psArr = outputStr.split('\n')
        for(var i = 0; i<psArr.length; i++){
          if(pkgRegExp.test(psArr[i])){
            log.debug(psArr[i])
            var lineArr = psArr[i].split(/\s+/)
            if(lineArr.length>8&&lineArr[8]==pkg)
            var pid =lineArr[1]
            log.debug('force stop start pkg:', lineArr[8])
            adb.shell(serial, 'kill ' + pid)
              .then(adbkit.util.readAll)
              .then(function (output) {
                log.debug('force stop pkg output : ', output.toString())
                if(/Operation not permitted/i.test(output.toString())){
                  adb.shell(serial, 'am force-stop ' + pkg)
                    .catch(function (err) {
                      log.warn('am force-stop fail ', pkg, err)
                    })
                }else{
                  log.debug('force stop pkg  : ', lineArr[8], pid)
                }
              })
              .catch(function (err) {
                log.debug('force stop failed; err:', err)
              })
          }
        }
        return
      }
    })
    .catch(function (err) {
      log.warn('adb shell error ; err:', err)
    })
}


function installPerformanceAndUnlockAPK(serial, adb, log) {
  log.debug('judge unLock and performance apk is installed started')
  var unLockpkg = 'com.example.unlock'
  var performancepkg = 'com.boyaa.stf.pt'

  return adb.isInstalled(serial,unLockpkg)
    .then(function (isinstalled) {
      if(!isinstalled){
        var source = '/var/stf/vendor/unlock_apk/unlock_apk-debug.apk'
        return adb.install(serial,source)
          .timeout(60000 * 5)
      }
    })
    .then(function () {
      adb.isInstalled(serial, performancepkg)
        .then(function (isinstalled) {
          if(!isinstalled){
            var source = '/var/stf/vendor/performanc/stfPT.apk'
            return adb.install(serial, source)
              .timeout(60000 * 5)
          }
        })
    })
    .catch(function (err) {
      log.error('adb isInstall error . err:',err)
      return Promise.reject(err)
    })
}

function pushUiautomator(serial, adb){
  var uiautomatorPath = '/var/stf/vendor/installuiautomator/autoinstall.jar'
  var phoneTmp = '/data/local/tmp/autoinstall.jar'
  return adb .push(serial, uiautomatorPath, phoneTmp)
    .then(function (transfer){
      var resolver = Promise.defer()
      function endlistenter() {
        resolver.resolve()
      }
      transfer.on('end', endlistenter)

      return resolver.promise.finally(function () {
        transfer.removeListener('end', endlistenter)
      })
    })
}


