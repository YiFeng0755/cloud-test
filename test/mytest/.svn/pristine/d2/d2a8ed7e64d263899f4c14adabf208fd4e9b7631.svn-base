package com.boyaa.testhallbase.business;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.Hex;
import org.json.JSONObject;

import com.boyaa.testhallbase.business.CommonBusiness.ServerEnvironment;

//import org.apache.commons.httpclient.HttpClient; 
//import org.apache.commons.httpclient.HttpMethod; 
//import org.apache.commons.httpclient.HttpStatus; 
//import org.apache.commons.httpclient.URIException; 
//import org.apache.commons.httpclient.methods.GetMethod; 
//import org.apache.commons.httpclient.methods.PostMethod; 
//import org.apache.commons.httpclient.params.HttpMethodParams; 


public class Superman {

	public JSONObject set(ServerEnvironment serverEnv, JSONObject jso){
		 final String encryptedKey = "terfv%^&4826oo";
		 final String timeStamp = "14571212354";	//server不检验时间戳，所以随便设置一个不变的
		 String paramsToSend = "time="+timeStamp+"&action=externals.autoTest";
		 
		 try {
			byte[] jsoBytesInBase64 = Base64.encodeBase64(jso.toString().getBytes("UTF-8"));
			String jsoStringInBase64 = new String(jsoBytesInBase64);
			paramsToSend = paramsToSend+"&code="+jsoStringInBase64;
			
			String stringNeedToBeEncryted = jsoStringInBase64+timeStamp+encryptedKey;
			byte[] bytesOfMessage = new byte[]{};
			bytesOfMessage = stringNeedToBeEncryted.getBytes("UTF-8");
			MessageDigest md;
			md = MessageDigest.getInstance("MD5");
			byte[] thedigest = md.digest(bytesOfMessage);
			String result = Hex.encodeHexString(thedigest);
			paramsToSend = paramsToSend+"&key="+result;
			
		} catch (UnsupportedEncodingException e1) {
			throw new RuntimeException("UnsupportedEncodingException:"+e1.toString());
		} catch (NoSuchAlgorithmException e) {
			throw new RuntimeException("NoSuchAlgorithmException:"+e.toString());
		}
		
		JSONObject jsoReturn = new JSONObject();
		switch(serverEnv) {
		case TestEnv:
			jsoReturn = postJsonDataToSpecificURL("http://192.168.200.21/dfqp/index.php?", paramsToSend);
			break;
		case OnlineEnv:
			jsoReturn = postJsonDataToSpecificURL("http://mvsnspus01.ifere.com/ddfqp/index.php?action=externals.autoTest", paramsToSend);
			break;
		case PrePublicEnv:
			jsoReturn = postJsonDataToSpecificURL("http://pcususus01.ifere.com/ddfqp/index.php?action=externals.autoTest", paramsToSend);
			break;
		default:
			break;
		}
//		System.out.println("jsonreturn:"+jsoReturn.toString());
		return jsoReturn;
		 
	 }
	
	private JSONObject postJsonDataToSpecificURL(String url ,String postParams){
		 JSONObject jsonObject = null;
		 try {
			URL oUrl =new URL(url);
			HttpURLConnection oHttpURLC = (HttpURLConnection) oUrl.openConnection();
			oHttpURLC.setDoOutput(true);
			oHttpURLC.setDoInput(true);
			oHttpURLC.setRequestMethod("POST");
			oHttpURLC.setUseCaches(false);
			oHttpURLC.setInstanceFollowRedirects(true);
			oHttpURLC.connect();
			//设置输出数据流
			DataOutputStream out = new DataOutputStream(oHttpURLC.getOutputStream());
			out.writeBytes(postParams);
          out.flush();
          out.close(); 
          BufferedReader reader = new BufferedReader(new InputStreamReader(
         		oHttpURLC.getInputStream()));
			 String s;
			 StringBuilder resultString = new StringBuilder();
			 while (((s = reader.readLine()) != null)) {
				 resultString.append(s);
			 }
			 reader.close();// 关闭输入流
			 //在这里把result这个字符串个给JSONObject。解读里面的内容。
			 System.out.println("resultString:"+resultString.toString());
			 jsonObject = new JSONObject(resultString.toString());
			 //String makeRobotStatus = jsonObject.getString("allErr");
			 reader.close();
          // 断开连接
          oHttpURLC.disconnect();
		} catch (Exception e) {
//			StringWriter sw = new StringWriter();
//			PrintWriter pw = new PrintWriter(sw);
//			e.printStackTrace(pw);
//			throw new RuntimeException("post json data error:"+sw.toString());		
		}
		return jsonObject;
	 }
	
}
