package com.boyaa.testholdemhk.cases;

import java.util.Locale;

import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;

import com.boyaa.rainbow2.annotations.CaseDesc;


import com.boyaa.testholdemhk.business.CommonBusiness;
import com.boyaa.testholdemhk.business.CaseData.CaseDataDriver;
import com.boyaa.testholdemhk.business.CommonBusiness.RoomLevel;
import com.boyaa.testholdemhk.uilib.BankruptcyPage;
import com.boyaa.testholdemhk.uilib.GoogleCheckoutPage;
import com.boyaa.testholdemhk.uilib.LobbyPage;
import com.boyaa.testholdemhk.uilib.LoginPage;
import com.boyaa.testholdemhk.uilib.MegaphoneBuyPage;
import com.boyaa.testholdemhk.uilib.PayCenterPage;
import com.boyaa.testholdemhk.uilib.PersonalInformationPage;
import com.boyaa.testholdemhk.uilib.PropsMarketPage;
import com.boyaa.testholdemhk.uilib.RoomListPage;
import com.boyaa.testholdemhk.uilib.RoomPage;
import com.boyaa.testholdemhk.uilib.RoomPage.PayDialog;
import com.boyaa.testholdemhk.uilib.SitAndGoRoomPage;
import com.boyaa.rainbow2.RainbowTestCase;


@Listeners({com.boyaa.rainbow2.RainbowListener.class})
@Test(description="This is a smoke test that use for Rainbow2 framework testing")
public class PayLogic extends RainbowTestCase {
	private static CommonBusiness cb = null;
	private LoginPage loginPage = null ;
	public PayLogic() {
		super();	
	}
	
	@BeforeMethod
	public void setUp() throws Exception {
		super.setUp(60,"com.boyaa.texaspoker.application.activity.LoginActivity");	
		cb = new CommonBusiness();
		loginPage = new LoginPage();
		loginPage.enterTestEnv();
	}
	
	@AfterMethod(alwaysRun=true)
	public void tearDown() throws Exception {
		super.tearDown();
	}
	
	protected void assertForPayType(String payType) {
//		page.waitSubElements("支付类型按钮组").get(payTypeIndex).click();		
		if (payType.toLowerCase(Locale.getDefault()).equals("google checkout")) {
			GoogleCheckoutPage googleCheckoutPage = new GoogleCheckoutPage();
			assertTrue(googleCheckoutPage.isSubElementPresent("支付页面"));
			//TODO: We can do more
			googleCheckoutPage.waitSubElement("继续按钮").click();
		}
	}
	
	@CaseDesc(id="PayLogic_001", name="test_lobbyPay")
	@Test(description="Test the lobby pay entrance",dataProvider = "PayLogic", dataProviderClass =CaseDataDriver.class)
	public void test_lobbyPay(String paytype) throws InterruptedException{	
		loginPage.loginAsGuestWithTag("normal");
		LobbyPage lobbyPage= new LobbyPage();
		lobbyPage.waitSubElement("储值中心按钮").click();
		PayCenterPage payCenterPage = new PayCenterPage();
		payCenterPage.closePayPagePopWindow(15*1000);
		assertTrue(payCenterPage.isSubElementPresent("游戏币按钮"));
		payCenterPage.chosePayType(paytype);
		payCenterPage.waitSubElement("google checkout的购买按钮").click();
		assertForPayType("google checkout");
	}
	
	@CaseDesc(id="PayLogic_002", name="test_roomPay")
	@Test(description="Test the room pay entrance")
	public void test_roomPay() throws InterruptedException{	
		loginPage.loginAsGuestWithCoins(2000);
		LobbyPage lobbyPage= new LobbyPage();
		lobbyPage.waitSubElement("游戏大厅按钮").click();
		RoomListPage roomListPage = new RoomListPage();
		roomListPage.selectRoomLevel(RoomLevel.Junior);
		cb.clickONANonFullRoom();
		RoomPage roomPage = new RoomPage();
		assertTrue(roomPage.clickRightBuyCoin(10*1000));
		roomPage.payDialog().waitSubElement("立即支付按钮").click();
		assertForPayType("google checkout");
	}
	
	@CaseDesc(id="PayLogic_003", name="test_roomListPay")
	@Test(description="Test the room list pay entrance",dataProvider = "PayLogic", dataProviderClass =CaseDataDriver.class)
	public void test_roomListPay(String paytype) throws InterruptedException{	
		loginPage.loginAsGuestWithCoins(2000);
		LobbyPage lobbyPage= new LobbyPage();
		lobbyPage.waitSubElement("游戏大厅按钮").click();
		RoomListPage roomListPage = new RoomListPage();
		roomListPage.waitSubElement("金币显示栏").click();
		PayCenterPage payCenterPage = new PayCenterPage();
		payCenterPage.closePayPagePopWindow(15*1000);
		assertTrue(payCenterPage.isSubElementPresent("游戏币按钮"));
		payCenterPage.chosePayType(paytype);
		payCenterPage.waitSubElement("google checkout的购买按钮").click();
		assertForPayType("google checkout");
	}
	
	@CaseDesc(id="PayLogic_004", name="test_gameNotEnough")
	@Test(description="Test the pay entrance - when there is not enough money for playing game")
	public void test_gameNotEnough() throws InterruptedException{	
		loginPage.loginAsGuestWithCoins(0);
		LobbyPage lobbyPage= new LobbyPage();
		lobbyPage.closeBankruptPopPage();
		lobbyPage.waitSubElement("游戏大厅按钮").click();
		cb.clickONANonFullRoom();
		PayDialog payDialog = new RoomPage().payDialog();
		assertTrue(payDialog.isPresent());
		payDialog.waitSubElement("立即支付按钮").click();
		assertForPayType("google checkout");
	}
	
	@CaseDesc(id="PayLogic_005", name="test_slotsNotEnough1")
	@Test(description="Test the pay entrance - when there is not enough money for playing slots (lobby)")
	public void test_slotsNotEnough1() throws InterruptedException{	
		loginPage.loginAsGuestWithCoins(0);
		LobbyPage lobbyPage= new LobbyPage();
		lobbyPage.closeBankruptPopPage();
		lobbyPage.waitSubElement("游戏图标按钮").click();
		lobbyPage.waitSubElement("大厅老虎机按钮").click();
		assertTrue(lobbyPage.slotPage().isPresent());
		lobbyPage.slotPage().shake();
		assertTrue(lobbyPage.payDialog().isPresent());
		lobbyPage.payDialog().waitSubElement("立即支付按钮").click();
		assertForPayType("google checkout");
	}
	
	@CaseDesc(id="PayLogic_006", name="test_slotsNotEnough2")
	@Test(description="Test the pay entrance - when there is not enough money for playing slots (room)")
	public void test_slotsNotEnough2() throws InterruptedException{
		loginPage.loginAsGuestWithCoins(0);
		LobbyPage lobbyPage= new LobbyPage();
		lobbyPage.closeBankruptPopPage();
		lobbyPage.waitSubElement("游戏大厅按钮").click();
		RoomListPage roomListPage = new RoomListPage();
		roomListPage.selectRoomLevel(RoomLevel.Junior);
		cb.clickONANonFullRoom();
		RoomPage roomPage = new RoomPage();
		PayDialog payDialog = roomPage.payDialog();
		payDialog.close();
		roomPage.waitSubElement("游戏按钮").click();
		//assertTrue(roomPage.isSubElementPresent("游戏列表"));
		roomPage.waitSubElement("老虎机按钮").click();
		assertTrue(roomPage.getSlotPage().isPresent());
		roomPage.getSlotPage().shake();
		assertForPayType("google checkout");
	}

	
	@CaseDesc(id="PayLogic_009", name="test_lobbyBankruptcy")
	@Test(description="Test the pay entrance - when the user is bankruptcy on the lobby")
	public void test_lobbyBankruptcy() throws InterruptedException{	
		loginPage.loginAsGuestWithCoins(0);
		LobbyPage lobbyPage= new LobbyPage();
		lobbyPage.closeBankruptPopPage();
		lobbyPage.waitSubElement("破产碗的图标").click();
		BankruptcyPage bPage = new BankruptcyPage();
		assertTrue(bPage.isPresent());
		bPage.waitSubElement("购买按钮").click();
		assertForPayType("google checkout");
	}
	
	@CaseDesc(id="PayLogic_010", name="test_sitGoGame")
	@Test(description="Test the pay entrance - when the user is under the sit and go game")
	public void test_sitGoGame() throws InterruptedException{
		loginPage.loginAsGuestWithCoins(0);
		LobbyPage lobbyPage= new LobbyPage();
		lobbyPage.closeBankruptPopPage();
		lobbyPage.waitSubElement("比赛广场按钮").click();
		//lobbyPage.waitSubElement("淘汰赛按钮").click();
		SitAndGoRoomPage sitAndGoRoomPage =new SitAndGoRoomPage();
		sitAndGoRoomPage.waitSubElement("淘汰赛房间").click();
		sitAndGoRoomPage.waitSubElement("立即报名").click();
		PayDialog payDialog = new RoomPage().payDialog();
		assertTrue(payDialog.isPresent(15));
		payDialog.waitSubElement("立即支付按钮",15).click();
		assertForPayType("google checkout");	
	}
	
	

	@CaseDesc(id="PayLogic_013", name="test_roomMegaPhone")
	@Test(description="Test the pay entrance - when the user doesn't have the megaphone function under the room",dataProvider = "PayLogic", dataProviderClass =CaseDataDriver.class)
	public void test_roomMegaPhone(String propname, String paytype) throws InterruptedException{	
		loginPage.loginAsGuestWithCoins(0);
		LobbyPage lobbyPage= new LobbyPage();
		lobbyPage.closeBankruptPopPage();
		lobbyPage.waitSubElement("游戏大厅按钮").click();
		cb.clickONANonFullRoom();
		RoomPage roomPage = new RoomPage();
		roomPage.payDialog().close();
		roomPage.waitSubElement("聊天按钮").click();
		roomPage.waitSubElement("聊天框").click();
		roomPage.waitSubElement("小喇叭").click();
		roomPage.hideKeyboard();//关闭键盘
		roomPage.waitSubElement("小喇叭的购买更多按钮").click();
		PropsMarketPage propsMarketPage =new PropsMarketPage();
		propsMarketPage.clickAppointPropBuyButton(propname);
		MegaphoneBuyPage megaphoneBuyPage =new MegaphoneBuyPage();
		assertTrue(megaphoneBuyPage.isPresent());
		megaphoneBuyPage.waitSubElement("确定按钮").click();
		megaphoneBuyPage.waitSubElement("博雅币不足提示页面的确定按钮").click();
		PayCenterPage payCenterPage = new PayCenterPage();
		payCenterPage.chosePayType(paytype);
		payCenterPage.waitSubElement("google checkout的购买按钮").click();
		assertForPayType("google checkout");	
	}
	
	/*
	 * 没有挽留框，case保留
	 
	@CaseDesc(id="PayLogic_014", name="test_loginAsFB1CN")
	@Test(description="Test the lobby pay entrance to stay")
	public void test_roomPayLeave() throws InterruptedException{	
		loginPage.loginAsGuest();
		LobbyPage lobbyPage= new LobbyPage();
		lobbyPage.waitSubElement("储值中心按钮").click();
		PayCenterPage payCenterPage = new PayCenterPage();
		payCenterPage.closePayPagePopWindow(15*1000);
		payCenterPage.waitSubElement("道具商城进入关闭按钮").click();
		PersuadePage persuadePage = new PersuadePage();
		persuadePage.waitSubElement("[不需要充值]按钮").click();
		assertFalse(persuadePage.isPresent());
		lobbyPage.waitSubElement("储值中心按钮").click();
		payCenterPage.close();
		persuadePage.waitSubElement("[继续充值]按钮").click();
		persuadePage.waitSubElement("确定按钮").click();
		assertForPayType("google checkout");
	}
	
	功能已不存在
	
	@CaseDesc(id="PayLogic_015", name="test_loginAsFB1CN")
	@Test(description="Test the room pay entrance to stay")
	public void test_roomPayLeave1() throws InterruptedException{
		loginPage.loginAsGuestWithCoins(2000);
		LobbyPage lobbyPage= new LobbyPage();
		lobbyPage.waitSubElement("游戏大厅按钮").click();
		cb.clickONANonFullRoom();
		RoomPage roomPage = new RoomPage();
		roomPage.waitSubElement("设置按钮").click();
		roomPage.waitSubElement("商城菜单项").click();
		roomPage.waitSubElement("商城支付页面的关闭按钮").click();
		PersuadePage persuadePage = new PersuadePage();
		persuadePage.waitSubElement("[继续充值]按钮").click();
		persuadePage.waitSubElement("确定按钮").click();
		assertForPayType("google checkout");
	}

	@CaseDesc(id="PayLogic_016", name="test_roomPayLeave2")
	@Test(description="Test the room pay entrance to leave")
	public void test_roomPayLeave2() throws InterruptedException{	
		loginPage.loginAsGuestWithCoins(2000);
		LobbyPage lobbyPage= new LobbyPage();
		lobbyPage.waitSubElement("游戏大厅按钮").click();
		cb.clickONANonFullRoom();
		RoomPage roomPage = new RoomPage();
		roomPage.waitSubElement("设置按钮").click();
		roomPage.waitSubElement("商城菜单项").click();
		roomPage.waitSubElement("商城支付页面的关闭按钮").click();
		PersuadePage persuadePage = new PersuadePage();
		persuadePage.waitSubElement("[不需要充值]按钮").click();
		assertFalse(roomPage.isSubElementPresent("商城支付页面的关闭按钮"));
	}
		*/
	@CaseDesc(id="PayLogic_017", name="test_PersonalPay")
	@Test(description="Test the pay entrance under the personal information page",dataProvider = "PayLogic", dataProviderClass =CaseDataDriver.class)
	public void test_PersonalPay(String paytype) throws InterruptedException{	
		loginPage.loginAsGuestWithTag("no_gift");
		LobbyPage lobbyPage= new LobbyPage();
		lobbyPage.waitSubElement("个人头像图标").click();
		PersonalInformationPage personalInformationPage = new PersonalInformationPage();
		personalInformationPage.waitSubElement("我的物品按钮").click();
		personalInformationPage.waitSubElement("去道具商城逛逛").click();
		PropsMarketPage propsMarketPage = new PropsMarketPage();
		propsMarketPage.waitSubElement("购买按钮").click();
		//propsMarketPage.waitSubElement("博雅币不足提示页面的确定按钮").click();
		PayCenterPage payCenterPage = new PayCenterPage();
		payCenterPage.closePayPagePopWindow(15*1000);
		assertTrue(payCenterPage.isSubElementPresent("游戏币按钮"));
		payCenterPage.chosePayType(paytype);
		payCenterPage.waitSubElement("google checkout的购买按钮").click();
		assertForPayType("google checkout");
	}
	
	@CaseDesc(id="PayLogic_018", name="test_unsuccessfulPay")
	@Test(description="Test the TOAST under the unsuccessful pay condition",dataProvider = "PayLogic", dataProviderClass =CaseDataDriver.class)
	public void test_unsuccessfulPay(String paytype) throws InterruptedException{	
		loginPage.loginAsGuestWithTag("normal");
		LobbyPage lobbyPage= new LobbyPage();
		lobbyPage.waitSubElement("储值中心按钮").click();
		PayCenterPage payCenterPage = new PayCenterPage();
		payCenterPage.closePayPagePopWindow(15*1000);
		assertTrue(payCenterPage.isSubElementPresent("游戏币按钮"));
		payCenterPage.chosePayType(paytype);
		payCenterPage.waitSubElement("google checkout的购买按钮").click();
		GoogleCheckoutPage googleCheckoutPage = new GoogleCheckoutPage();
		assertTrue(googleCheckoutPage.isSubElementPresent("支付页面"));
		super.getDriver().pressBack();
		payCenterPage.waitSubElement("道具商城进入关闭按钮").click();
		//new PersuadePage().waitSubElement("[不需要充值]按钮").click();
		assertTrue(lobbyPage.isSubElementPresent("支付不成功TOAST", 180));
	}
    /*没有该功能
	@CaseDesc(id="PayLogic_021", name="test_roomPayLeave3")
	@Test(description="Test the room pay entrance to stay")
	public void test_roomPayLeave3() throws InterruptedException{
		loginPage.loginAsGuestWithCoins(2000);
		LobbyPage lobbyPage= new LobbyPage();
		lobbyPage.waitSubElement("游戏大厅按钮").click();
		cb.clickONANonFullRoom();
		RoomPage roomPage = new RoomPage();
		roomPage.waitSubElement("设置按钮").click();
		assertTrue(roomPage.isSubElementPresent("商城菜单项"));
		roomPage.waitSubElement("商城菜单项").click();
		roomPage.waitSubElement("商城支付页面的购买按钮").click();
		assertForPayType("google checkout");
	}
     */
}
